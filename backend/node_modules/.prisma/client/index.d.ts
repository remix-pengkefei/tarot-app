
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model TarotCard
 * 
 */
export type TarotCard = $Result.DefaultSelection<Prisma.$TarotCardPayload>
/**
 * Model Spread
 * 
 */
export type Spread = $Result.DefaultSelection<Prisma.$SpreadPayload>
/**
 * Model Divination
 * 
 */
export type Divination = $Result.DefaultSelection<Prisma.$DivinationPayload>
/**
 * Model DivinationCard
 * 
 */
export type DivinationCard = $Result.DefaultSelection<Prisma.$DivinationCardPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more TarotCards
 * const tarotCards = await prisma.tarotCard.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more TarotCards
   * const tarotCards = await prisma.tarotCard.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.tarotCard`: Exposes CRUD operations for the **TarotCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TarotCards
    * const tarotCards = await prisma.tarotCard.findMany()
    * ```
    */
  get tarotCard(): Prisma.TarotCardDelegate<ExtArgs>;

  /**
   * `prisma.spread`: Exposes CRUD operations for the **Spread** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Spreads
    * const spreads = await prisma.spread.findMany()
    * ```
    */
  get spread(): Prisma.SpreadDelegate<ExtArgs>;

  /**
   * `prisma.divination`: Exposes CRUD operations for the **Divination** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Divinations
    * const divinations = await prisma.divination.findMany()
    * ```
    */
  get divination(): Prisma.DivinationDelegate<ExtArgs>;

  /**
   * `prisma.divinationCard`: Exposes CRUD operations for the **DivinationCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DivinationCards
    * const divinationCards = await prisma.divinationCard.findMany()
    * ```
    */
  get divinationCard(): Prisma.DivinationCardDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    TarotCard: 'TarotCard',
    Spread: 'Spread',
    Divination: 'Divination',
    DivinationCard: 'DivinationCard'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "tarotCard" | "spread" | "divination" | "divinationCard"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      TarotCard: {
        payload: Prisma.$TarotCardPayload<ExtArgs>
        fields: Prisma.TarotCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TarotCardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TarotCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TarotCardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TarotCardPayload>
          }
          findFirst: {
            args: Prisma.TarotCardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TarotCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TarotCardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TarotCardPayload>
          }
          findMany: {
            args: Prisma.TarotCardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TarotCardPayload>[]
          }
          create: {
            args: Prisma.TarotCardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TarotCardPayload>
          }
          createMany: {
            args: Prisma.TarotCardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TarotCardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TarotCardPayload>[]
          }
          delete: {
            args: Prisma.TarotCardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TarotCardPayload>
          }
          update: {
            args: Prisma.TarotCardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TarotCardPayload>
          }
          deleteMany: {
            args: Prisma.TarotCardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TarotCardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TarotCardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TarotCardPayload>
          }
          aggregate: {
            args: Prisma.TarotCardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTarotCard>
          }
          groupBy: {
            args: Prisma.TarotCardGroupByArgs<ExtArgs>
            result: $Utils.Optional<TarotCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.TarotCardCountArgs<ExtArgs>
            result: $Utils.Optional<TarotCardCountAggregateOutputType> | number
          }
        }
      }
      Spread: {
        payload: Prisma.$SpreadPayload<ExtArgs>
        fields: Prisma.SpreadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpreadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpreadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadPayload>
          }
          findFirst: {
            args: Prisma.SpreadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpreadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadPayload>
          }
          findMany: {
            args: Prisma.SpreadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadPayload>[]
          }
          create: {
            args: Prisma.SpreadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadPayload>
          }
          createMany: {
            args: Prisma.SpreadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SpreadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadPayload>[]
          }
          delete: {
            args: Prisma.SpreadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadPayload>
          }
          update: {
            args: Prisma.SpreadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadPayload>
          }
          deleteMany: {
            args: Prisma.SpreadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SpreadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SpreadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadPayload>
          }
          aggregate: {
            args: Prisma.SpreadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSpread>
          }
          groupBy: {
            args: Prisma.SpreadGroupByArgs<ExtArgs>
            result: $Utils.Optional<SpreadGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpreadCountArgs<ExtArgs>
            result: $Utils.Optional<SpreadCountAggregateOutputType> | number
          }
        }
      }
      Divination: {
        payload: Prisma.$DivinationPayload<ExtArgs>
        fields: Prisma.DivinationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DivinationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DivinationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationPayload>
          }
          findFirst: {
            args: Prisma.DivinationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DivinationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationPayload>
          }
          findMany: {
            args: Prisma.DivinationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationPayload>[]
          }
          create: {
            args: Prisma.DivinationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationPayload>
          }
          createMany: {
            args: Prisma.DivinationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DivinationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationPayload>[]
          }
          delete: {
            args: Prisma.DivinationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationPayload>
          }
          update: {
            args: Prisma.DivinationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationPayload>
          }
          deleteMany: {
            args: Prisma.DivinationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DivinationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DivinationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationPayload>
          }
          aggregate: {
            args: Prisma.DivinationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDivination>
          }
          groupBy: {
            args: Prisma.DivinationGroupByArgs<ExtArgs>
            result: $Utils.Optional<DivinationGroupByOutputType>[]
          }
          count: {
            args: Prisma.DivinationCountArgs<ExtArgs>
            result: $Utils.Optional<DivinationCountAggregateOutputType> | number
          }
        }
      }
      DivinationCard: {
        payload: Prisma.$DivinationCardPayload<ExtArgs>
        fields: Prisma.DivinationCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DivinationCardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DivinationCardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationCardPayload>
          }
          findFirst: {
            args: Prisma.DivinationCardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DivinationCardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationCardPayload>
          }
          findMany: {
            args: Prisma.DivinationCardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationCardPayload>[]
          }
          create: {
            args: Prisma.DivinationCardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationCardPayload>
          }
          createMany: {
            args: Prisma.DivinationCardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DivinationCardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationCardPayload>[]
          }
          delete: {
            args: Prisma.DivinationCardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationCardPayload>
          }
          update: {
            args: Prisma.DivinationCardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationCardPayload>
          }
          deleteMany: {
            args: Prisma.DivinationCardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DivinationCardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DivinationCardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivinationCardPayload>
          }
          aggregate: {
            args: Prisma.DivinationCardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDivinationCard>
          }
          groupBy: {
            args: Prisma.DivinationCardGroupByArgs<ExtArgs>
            result: $Utils.Optional<DivinationCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.DivinationCardCountArgs<ExtArgs>
            result: $Utils.Optional<DivinationCardCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TarotCardCountOutputType
   */

  export type TarotCardCountOutputType = {
    divinationCards: number
  }

  export type TarotCardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    divinationCards?: boolean | TarotCardCountOutputTypeCountDivinationCardsArgs
  }

  // Custom InputTypes
  /**
   * TarotCardCountOutputType without action
   */
  export type TarotCardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TarotCardCountOutputType
     */
    select?: TarotCardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TarotCardCountOutputType without action
   */
  export type TarotCardCountOutputTypeCountDivinationCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DivinationCardWhereInput
  }


  /**
   * Count Type SpreadCountOutputType
   */

  export type SpreadCountOutputType = {
    divinations: number
  }

  export type SpreadCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    divinations?: boolean | SpreadCountOutputTypeCountDivinationsArgs
  }

  // Custom InputTypes
  /**
   * SpreadCountOutputType without action
   */
  export type SpreadCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpreadCountOutputType
     */
    select?: SpreadCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SpreadCountOutputType without action
   */
  export type SpreadCountOutputTypeCountDivinationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DivinationWhereInput
  }


  /**
   * Count Type DivinationCountOutputType
   */

  export type DivinationCountOutputType = {
    divinationCards: number
  }

  export type DivinationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    divinationCards?: boolean | DivinationCountOutputTypeCountDivinationCardsArgs
  }

  // Custom InputTypes
  /**
   * DivinationCountOutputType without action
   */
  export type DivinationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivinationCountOutputType
     */
    select?: DivinationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DivinationCountOutputType without action
   */
  export type DivinationCountOutputTypeCountDivinationCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DivinationCardWhereInput
  }


  /**
   * Models
   */

  /**
   * Model TarotCard
   */

  export type AggregateTarotCard = {
    _count: TarotCardCountAggregateOutputType | null
    _avg: TarotCardAvgAggregateOutputType | null
    _sum: TarotCardSumAggregateOutputType | null
    _min: TarotCardMinAggregateOutputType | null
    _max: TarotCardMaxAggregateOutputType | null
  }

  export type TarotCardAvgAggregateOutputType = {
    id: number | null
    number: number | null
  }

  export type TarotCardSumAggregateOutputType = {
    id: number | null
    number: number | null
  }

  export type TarotCardMinAggregateOutputType = {
    id: number | null
    name: string | null
    arcana: string | null
    suit: string | null
    number: number | null
    uprightMeaning: string | null
    reversedMeaning: string | null
    keywords: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TarotCardMaxAggregateOutputType = {
    id: number | null
    name: string | null
    arcana: string | null
    suit: string | null
    number: number | null
    uprightMeaning: string | null
    reversedMeaning: string | null
    keywords: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TarotCardCountAggregateOutputType = {
    id: number
    name: number
    arcana: number
    suit: number
    number: number
    uprightMeaning: number
    reversedMeaning: number
    keywords: number
    imageUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TarotCardAvgAggregateInputType = {
    id?: true
    number?: true
  }

  export type TarotCardSumAggregateInputType = {
    id?: true
    number?: true
  }

  export type TarotCardMinAggregateInputType = {
    id?: true
    name?: true
    arcana?: true
    suit?: true
    number?: true
    uprightMeaning?: true
    reversedMeaning?: true
    keywords?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TarotCardMaxAggregateInputType = {
    id?: true
    name?: true
    arcana?: true
    suit?: true
    number?: true
    uprightMeaning?: true
    reversedMeaning?: true
    keywords?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TarotCardCountAggregateInputType = {
    id?: true
    name?: true
    arcana?: true
    suit?: true
    number?: true
    uprightMeaning?: true
    reversedMeaning?: true
    keywords?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TarotCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TarotCard to aggregate.
     */
    where?: TarotCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TarotCards to fetch.
     */
    orderBy?: TarotCardOrderByWithRelationInput | TarotCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TarotCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TarotCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TarotCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TarotCards
    **/
    _count?: true | TarotCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TarotCardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TarotCardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TarotCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TarotCardMaxAggregateInputType
  }

  export type GetTarotCardAggregateType<T extends TarotCardAggregateArgs> = {
        [P in keyof T & keyof AggregateTarotCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTarotCard[P]>
      : GetScalarType<T[P], AggregateTarotCard[P]>
  }




  export type TarotCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TarotCardWhereInput
    orderBy?: TarotCardOrderByWithAggregationInput | TarotCardOrderByWithAggregationInput[]
    by: TarotCardScalarFieldEnum[] | TarotCardScalarFieldEnum
    having?: TarotCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TarotCardCountAggregateInputType | true
    _avg?: TarotCardAvgAggregateInputType
    _sum?: TarotCardSumAggregateInputType
    _min?: TarotCardMinAggregateInputType
    _max?: TarotCardMaxAggregateInputType
  }

  export type TarotCardGroupByOutputType = {
    id: number
    name: string
    arcana: string
    suit: string | null
    number: number | null
    uprightMeaning: string
    reversedMeaning: string
    keywords: string
    imageUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: TarotCardCountAggregateOutputType | null
    _avg: TarotCardAvgAggregateOutputType | null
    _sum: TarotCardSumAggregateOutputType | null
    _min: TarotCardMinAggregateOutputType | null
    _max: TarotCardMaxAggregateOutputType | null
  }

  type GetTarotCardGroupByPayload<T extends TarotCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TarotCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TarotCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TarotCardGroupByOutputType[P]>
            : GetScalarType<T[P], TarotCardGroupByOutputType[P]>
        }
      >
    >


  export type TarotCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    arcana?: boolean
    suit?: boolean
    number?: boolean
    uprightMeaning?: boolean
    reversedMeaning?: boolean
    keywords?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    divinationCards?: boolean | TarotCard$divinationCardsArgs<ExtArgs>
    _count?: boolean | TarotCardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tarotCard"]>

  export type TarotCardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    arcana?: boolean
    suit?: boolean
    number?: boolean
    uprightMeaning?: boolean
    reversedMeaning?: boolean
    keywords?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tarotCard"]>

  export type TarotCardSelectScalar = {
    id?: boolean
    name?: boolean
    arcana?: boolean
    suit?: boolean
    number?: boolean
    uprightMeaning?: boolean
    reversedMeaning?: boolean
    keywords?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TarotCardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    divinationCards?: boolean | TarotCard$divinationCardsArgs<ExtArgs>
    _count?: boolean | TarotCardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TarotCardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TarotCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TarotCard"
    objects: {
      divinationCards: Prisma.$DivinationCardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      arcana: string
      suit: string | null
      number: number | null
      uprightMeaning: string
      reversedMeaning: string
      keywords: string
      imageUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tarotCard"]>
    composites: {}
  }

  type TarotCardGetPayload<S extends boolean | null | undefined | TarotCardDefaultArgs> = $Result.GetResult<Prisma.$TarotCardPayload, S>

  type TarotCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TarotCardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TarotCardCountAggregateInputType | true
    }

  export interface TarotCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TarotCard'], meta: { name: 'TarotCard' } }
    /**
     * Find zero or one TarotCard that matches the filter.
     * @param {TarotCardFindUniqueArgs} args - Arguments to find a TarotCard
     * @example
     * // Get one TarotCard
     * const tarotCard = await prisma.tarotCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TarotCardFindUniqueArgs>(args: SelectSubset<T, TarotCardFindUniqueArgs<ExtArgs>>): Prisma__TarotCardClient<$Result.GetResult<Prisma.$TarotCardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TarotCard that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TarotCardFindUniqueOrThrowArgs} args - Arguments to find a TarotCard
     * @example
     * // Get one TarotCard
     * const tarotCard = await prisma.tarotCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TarotCardFindUniqueOrThrowArgs>(args: SelectSubset<T, TarotCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TarotCardClient<$Result.GetResult<Prisma.$TarotCardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TarotCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TarotCardFindFirstArgs} args - Arguments to find a TarotCard
     * @example
     * // Get one TarotCard
     * const tarotCard = await prisma.tarotCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TarotCardFindFirstArgs>(args?: SelectSubset<T, TarotCardFindFirstArgs<ExtArgs>>): Prisma__TarotCardClient<$Result.GetResult<Prisma.$TarotCardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TarotCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TarotCardFindFirstOrThrowArgs} args - Arguments to find a TarotCard
     * @example
     * // Get one TarotCard
     * const tarotCard = await prisma.tarotCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TarotCardFindFirstOrThrowArgs>(args?: SelectSubset<T, TarotCardFindFirstOrThrowArgs<ExtArgs>>): Prisma__TarotCardClient<$Result.GetResult<Prisma.$TarotCardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TarotCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TarotCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TarotCards
     * const tarotCards = await prisma.tarotCard.findMany()
     * 
     * // Get first 10 TarotCards
     * const tarotCards = await prisma.tarotCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tarotCardWithIdOnly = await prisma.tarotCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TarotCardFindManyArgs>(args?: SelectSubset<T, TarotCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TarotCardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TarotCard.
     * @param {TarotCardCreateArgs} args - Arguments to create a TarotCard.
     * @example
     * // Create one TarotCard
     * const TarotCard = await prisma.tarotCard.create({
     *   data: {
     *     // ... data to create a TarotCard
     *   }
     * })
     * 
     */
    create<T extends TarotCardCreateArgs>(args: SelectSubset<T, TarotCardCreateArgs<ExtArgs>>): Prisma__TarotCardClient<$Result.GetResult<Prisma.$TarotCardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TarotCards.
     * @param {TarotCardCreateManyArgs} args - Arguments to create many TarotCards.
     * @example
     * // Create many TarotCards
     * const tarotCard = await prisma.tarotCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TarotCardCreateManyArgs>(args?: SelectSubset<T, TarotCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TarotCards and returns the data saved in the database.
     * @param {TarotCardCreateManyAndReturnArgs} args - Arguments to create many TarotCards.
     * @example
     * // Create many TarotCards
     * const tarotCard = await prisma.tarotCard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TarotCards and only return the `id`
     * const tarotCardWithIdOnly = await prisma.tarotCard.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TarotCardCreateManyAndReturnArgs>(args?: SelectSubset<T, TarotCardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TarotCardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TarotCard.
     * @param {TarotCardDeleteArgs} args - Arguments to delete one TarotCard.
     * @example
     * // Delete one TarotCard
     * const TarotCard = await prisma.tarotCard.delete({
     *   where: {
     *     // ... filter to delete one TarotCard
     *   }
     * })
     * 
     */
    delete<T extends TarotCardDeleteArgs>(args: SelectSubset<T, TarotCardDeleteArgs<ExtArgs>>): Prisma__TarotCardClient<$Result.GetResult<Prisma.$TarotCardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TarotCard.
     * @param {TarotCardUpdateArgs} args - Arguments to update one TarotCard.
     * @example
     * // Update one TarotCard
     * const tarotCard = await prisma.tarotCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TarotCardUpdateArgs>(args: SelectSubset<T, TarotCardUpdateArgs<ExtArgs>>): Prisma__TarotCardClient<$Result.GetResult<Prisma.$TarotCardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TarotCards.
     * @param {TarotCardDeleteManyArgs} args - Arguments to filter TarotCards to delete.
     * @example
     * // Delete a few TarotCards
     * const { count } = await prisma.tarotCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TarotCardDeleteManyArgs>(args?: SelectSubset<T, TarotCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TarotCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TarotCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TarotCards
     * const tarotCard = await prisma.tarotCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TarotCardUpdateManyArgs>(args: SelectSubset<T, TarotCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TarotCard.
     * @param {TarotCardUpsertArgs} args - Arguments to update or create a TarotCard.
     * @example
     * // Update or create a TarotCard
     * const tarotCard = await prisma.tarotCard.upsert({
     *   create: {
     *     // ... data to create a TarotCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TarotCard we want to update
     *   }
     * })
     */
    upsert<T extends TarotCardUpsertArgs>(args: SelectSubset<T, TarotCardUpsertArgs<ExtArgs>>): Prisma__TarotCardClient<$Result.GetResult<Prisma.$TarotCardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TarotCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TarotCardCountArgs} args - Arguments to filter TarotCards to count.
     * @example
     * // Count the number of TarotCards
     * const count = await prisma.tarotCard.count({
     *   where: {
     *     // ... the filter for the TarotCards we want to count
     *   }
     * })
    **/
    count<T extends TarotCardCountArgs>(
      args?: Subset<T, TarotCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TarotCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TarotCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TarotCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TarotCardAggregateArgs>(args: Subset<T, TarotCardAggregateArgs>): Prisma.PrismaPromise<GetTarotCardAggregateType<T>>

    /**
     * Group by TarotCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TarotCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TarotCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TarotCardGroupByArgs['orderBy'] }
        : { orderBy?: TarotCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TarotCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTarotCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TarotCard model
   */
  readonly fields: TarotCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TarotCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TarotCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    divinationCards<T extends TarotCard$divinationCardsArgs<ExtArgs> = {}>(args?: Subset<T, TarotCard$divinationCardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DivinationCardPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TarotCard model
   */ 
  interface TarotCardFieldRefs {
    readonly id: FieldRef<"TarotCard", 'Int'>
    readonly name: FieldRef<"TarotCard", 'String'>
    readonly arcana: FieldRef<"TarotCard", 'String'>
    readonly suit: FieldRef<"TarotCard", 'String'>
    readonly number: FieldRef<"TarotCard", 'Int'>
    readonly uprightMeaning: FieldRef<"TarotCard", 'String'>
    readonly reversedMeaning: FieldRef<"TarotCard", 'String'>
    readonly keywords: FieldRef<"TarotCard", 'String'>
    readonly imageUrl: FieldRef<"TarotCard", 'String'>
    readonly createdAt: FieldRef<"TarotCard", 'DateTime'>
    readonly updatedAt: FieldRef<"TarotCard", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TarotCard findUnique
   */
  export type TarotCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TarotCard
     */
    select?: TarotCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TarotCardInclude<ExtArgs> | null
    /**
     * Filter, which TarotCard to fetch.
     */
    where: TarotCardWhereUniqueInput
  }

  /**
   * TarotCard findUniqueOrThrow
   */
  export type TarotCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TarotCard
     */
    select?: TarotCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TarotCardInclude<ExtArgs> | null
    /**
     * Filter, which TarotCard to fetch.
     */
    where: TarotCardWhereUniqueInput
  }

  /**
   * TarotCard findFirst
   */
  export type TarotCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TarotCard
     */
    select?: TarotCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TarotCardInclude<ExtArgs> | null
    /**
     * Filter, which TarotCard to fetch.
     */
    where?: TarotCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TarotCards to fetch.
     */
    orderBy?: TarotCardOrderByWithRelationInput | TarotCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TarotCards.
     */
    cursor?: TarotCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TarotCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TarotCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TarotCards.
     */
    distinct?: TarotCardScalarFieldEnum | TarotCardScalarFieldEnum[]
  }

  /**
   * TarotCard findFirstOrThrow
   */
  export type TarotCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TarotCard
     */
    select?: TarotCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TarotCardInclude<ExtArgs> | null
    /**
     * Filter, which TarotCard to fetch.
     */
    where?: TarotCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TarotCards to fetch.
     */
    orderBy?: TarotCardOrderByWithRelationInput | TarotCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TarotCards.
     */
    cursor?: TarotCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TarotCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TarotCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TarotCards.
     */
    distinct?: TarotCardScalarFieldEnum | TarotCardScalarFieldEnum[]
  }

  /**
   * TarotCard findMany
   */
  export type TarotCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TarotCard
     */
    select?: TarotCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TarotCardInclude<ExtArgs> | null
    /**
     * Filter, which TarotCards to fetch.
     */
    where?: TarotCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TarotCards to fetch.
     */
    orderBy?: TarotCardOrderByWithRelationInput | TarotCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TarotCards.
     */
    cursor?: TarotCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TarotCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TarotCards.
     */
    skip?: number
    distinct?: TarotCardScalarFieldEnum | TarotCardScalarFieldEnum[]
  }

  /**
   * TarotCard create
   */
  export type TarotCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TarotCard
     */
    select?: TarotCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TarotCardInclude<ExtArgs> | null
    /**
     * The data needed to create a TarotCard.
     */
    data: XOR<TarotCardCreateInput, TarotCardUncheckedCreateInput>
  }

  /**
   * TarotCard createMany
   */
  export type TarotCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TarotCards.
     */
    data: TarotCardCreateManyInput | TarotCardCreateManyInput[]
  }

  /**
   * TarotCard createManyAndReturn
   */
  export type TarotCardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TarotCard
     */
    select?: TarotCardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TarotCards.
     */
    data: TarotCardCreateManyInput | TarotCardCreateManyInput[]
  }

  /**
   * TarotCard update
   */
  export type TarotCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TarotCard
     */
    select?: TarotCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TarotCardInclude<ExtArgs> | null
    /**
     * The data needed to update a TarotCard.
     */
    data: XOR<TarotCardUpdateInput, TarotCardUncheckedUpdateInput>
    /**
     * Choose, which TarotCard to update.
     */
    where: TarotCardWhereUniqueInput
  }

  /**
   * TarotCard updateMany
   */
  export type TarotCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TarotCards.
     */
    data: XOR<TarotCardUpdateManyMutationInput, TarotCardUncheckedUpdateManyInput>
    /**
     * Filter which TarotCards to update
     */
    where?: TarotCardWhereInput
  }

  /**
   * TarotCard upsert
   */
  export type TarotCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TarotCard
     */
    select?: TarotCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TarotCardInclude<ExtArgs> | null
    /**
     * The filter to search for the TarotCard to update in case it exists.
     */
    where: TarotCardWhereUniqueInput
    /**
     * In case the TarotCard found by the `where` argument doesn't exist, create a new TarotCard with this data.
     */
    create: XOR<TarotCardCreateInput, TarotCardUncheckedCreateInput>
    /**
     * In case the TarotCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TarotCardUpdateInput, TarotCardUncheckedUpdateInput>
  }

  /**
   * TarotCard delete
   */
  export type TarotCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TarotCard
     */
    select?: TarotCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TarotCardInclude<ExtArgs> | null
    /**
     * Filter which TarotCard to delete.
     */
    where: TarotCardWhereUniqueInput
  }

  /**
   * TarotCard deleteMany
   */
  export type TarotCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TarotCards to delete
     */
    where?: TarotCardWhereInput
  }

  /**
   * TarotCard.divinationCards
   */
  export type TarotCard$divinationCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivinationCard
     */
    select?: DivinationCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationCardInclude<ExtArgs> | null
    where?: DivinationCardWhereInput
    orderBy?: DivinationCardOrderByWithRelationInput | DivinationCardOrderByWithRelationInput[]
    cursor?: DivinationCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DivinationCardScalarFieldEnum | DivinationCardScalarFieldEnum[]
  }

  /**
   * TarotCard without action
   */
  export type TarotCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TarotCard
     */
    select?: TarotCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TarotCardInclude<ExtArgs> | null
  }


  /**
   * Model Spread
   */

  export type AggregateSpread = {
    _count: SpreadCountAggregateOutputType | null
    _avg: SpreadAvgAggregateOutputType | null
    _sum: SpreadSumAggregateOutputType | null
    _min: SpreadMinAggregateOutputType | null
    _max: SpreadMaxAggregateOutputType | null
  }

  export type SpreadAvgAggregateOutputType = {
    id: number | null
    cardCount: number | null
  }

  export type SpreadSumAggregateOutputType = {
    id: number | null
    cardCount: number | null
  }

  export type SpreadMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    positions: string | null
    cardCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SpreadMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    positions: string | null
    cardCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SpreadCountAggregateOutputType = {
    id: number
    name: number
    description: number
    positions: number
    cardCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SpreadAvgAggregateInputType = {
    id?: true
    cardCount?: true
  }

  export type SpreadSumAggregateInputType = {
    id?: true
    cardCount?: true
  }

  export type SpreadMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    positions?: true
    cardCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SpreadMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    positions?: true
    cardCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SpreadCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    positions?: true
    cardCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SpreadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Spread to aggregate.
     */
    where?: SpreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spreads to fetch.
     */
    orderBy?: SpreadOrderByWithRelationInput | SpreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Spreads
    **/
    _count?: true | SpreadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpreadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpreadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpreadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpreadMaxAggregateInputType
  }

  export type GetSpreadAggregateType<T extends SpreadAggregateArgs> = {
        [P in keyof T & keyof AggregateSpread]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpread[P]>
      : GetScalarType<T[P], AggregateSpread[P]>
  }




  export type SpreadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpreadWhereInput
    orderBy?: SpreadOrderByWithAggregationInput | SpreadOrderByWithAggregationInput[]
    by: SpreadScalarFieldEnum[] | SpreadScalarFieldEnum
    having?: SpreadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpreadCountAggregateInputType | true
    _avg?: SpreadAvgAggregateInputType
    _sum?: SpreadSumAggregateInputType
    _min?: SpreadMinAggregateInputType
    _max?: SpreadMaxAggregateInputType
  }

  export type SpreadGroupByOutputType = {
    id: number
    name: string
    description: string
    positions: string
    cardCount: number
    createdAt: Date
    updatedAt: Date
    _count: SpreadCountAggregateOutputType | null
    _avg: SpreadAvgAggregateOutputType | null
    _sum: SpreadSumAggregateOutputType | null
    _min: SpreadMinAggregateOutputType | null
    _max: SpreadMaxAggregateOutputType | null
  }

  type GetSpreadGroupByPayload<T extends SpreadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpreadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpreadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpreadGroupByOutputType[P]>
            : GetScalarType<T[P], SpreadGroupByOutputType[P]>
        }
      >
    >


  export type SpreadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    positions?: boolean
    cardCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    divinations?: boolean | Spread$divinationsArgs<ExtArgs>
    _count?: boolean | SpreadCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spread"]>

  export type SpreadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    positions?: boolean
    cardCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["spread"]>

  export type SpreadSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    positions?: boolean
    cardCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SpreadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    divinations?: boolean | Spread$divinationsArgs<ExtArgs>
    _count?: boolean | SpreadCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SpreadIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SpreadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Spread"
    objects: {
      divinations: Prisma.$DivinationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      positions: string
      cardCount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["spread"]>
    composites: {}
  }

  type SpreadGetPayload<S extends boolean | null | undefined | SpreadDefaultArgs> = $Result.GetResult<Prisma.$SpreadPayload, S>

  type SpreadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SpreadFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SpreadCountAggregateInputType | true
    }

  export interface SpreadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Spread'], meta: { name: 'Spread' } }
    /**
     * Find zero or one Spread that matches the filter.
     * @param {SpreadFindUniqueArgs} args - Arguments to find a Spread
     * @example
     * // Get one Spread
     * const spread = await prisma.spread.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SpreadFindUniqueArgs>(args: SelectSubset<T, SpreadFindUniqueArgs<ExtArgs>>): Prisma__SpreadClient<$Result.GetResult<Prisma.$SpreadPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Spread that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SpreadFindUniqueOrThrowArgs} args - Arguments to find a Spread
     * @example
     * // Get one Spread
     * const spread = await prisma.spread.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SpreadFindUniqueOrThrowArgs>(args: SelectSubset<T, SpreadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SpreadClient<$Result.GetResult<Prisma.$SpreadPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Spread that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpreadFindFirstArgs} args - Arguments to find a Spread
     * @example
     * // Get one Spread
     * const spread = await prisma.spread.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SpreadFindFirstArgs>(args?: SelectSubset<T, SpreadFindFirstArgs<ExtArgs>>): Prisma__SpreadClient<$Result.GetResult<Prisma.$SpreadPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Spread that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpreadFindFirstOrThrowArgs} args - Arguments to find a Spread
     * @example
     * // Get one Spread
     * const spread = await prisma.spread.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SpreadFindFirstOrThrowArgs>(args?: SelectSubset<T, SpreadFindFirstOrThrowArgs<ExtArgs>>): Prisma__SpreadClient<$Result.GetResult<Prisma.$SpreadPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Spreads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpreadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Spreads
     * const spreads = await prisma.spread.findMany()
     * 
     * // Get first 10 Spreads
     * const spreads = await prisma.spread.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const spreadWithIdOnly = await prisma.spread.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SpreadFindManyArgs>(args?: SelectSubset<T, SpreadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpreadPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Spread.
     * @param {SpreadCreateArgs} args - Arguments to create a Spread.
     * @example
     * // Create one Spread
     * const Spread = await prisma.spread.create({
     *   data: {
     *     // ... data to create a Spread
     *   }
     * })
     * 
     */
    create<T extends SpreadCreateArgs>(args: SelectSubset<T, SpreadCreateArgs<ExtArgs>>): Prisma__SpreadClient<$Result.GetResult<Prisma.$SpreadPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Spreads.
     * @param {SpreadCreateManyArgs} args - Arguments to create many Spreads.
     * @example
     * // Create many Spreads
     * const spread = await prisma.spread.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SpreadCreateManyArgs>(args?: SelectSubset<T, SpreadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Spreads and returns the data saved in the database.
     * @param {SpreadCreateManyAndReturnArgs} args - Arguments to create many Spreads.
     * @example
     * // Create many Spreads
     * const spread = await prisma.spread.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Spreads and only return the `id`
     * const spreadWithIdOnly = await prisma.spread.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SpreadCreateManyAndReturnArgs>(args?: SelectSubset<T, SpreadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpreadPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Spread.
     * @param {SpreadDeleteArgs} args - Arguments to delete one Spread.
     * @example
     * // Delete one Spread
     * const Spread = await prisma.spread.delete({
     *   where: {
     *     // ... filter to delete one Spread
     *   }
     * })
     * 
     */
    delete<T extends SpreadDeleteArgs>(args: SelectSubset<T, SpreadDeleteArgs<ExtArgs>>): Prisma__SpreadClient<$Result.GetResult<Prisma.$SpreadPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Spread.
     * @param {SpreadUpdateArgs} args - Arguments to update one Spread.
     * @example
     * // Update one Spread
     * const spread = await prisma.spread.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SpreadUpdateArgs>(args: SelectSubset<T, SpreadUpdateArgs<ExtArgs>>): Prisma__SpreadClient<$Result.GetResult<Prisma.$SpreadPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Spreads.
     * @param {SpreadDeleteManyArgs} args - Arguments to filter Spreads to delete.
     * @example
     * // Delete a few Spreads
     * const { count } = await prisma.spread.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SpreadDeleteManyArgs>(args?: SelectSubset<T, SpreadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Spreads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpreadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Spreads
     * const spread = await prisma.spread.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SpreadUpdateManyArgs>(args: SelectSubset<T, SpreadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Spread.
     * @param {SpreadUpsertArgs} args - Arguments to update or create a Spread.
     * @example
     * // Update or create a Spread
     * const spread = await prisma.spread.upsert({
     *   create: {
     *     // ... data to create a Spread
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Spread we want to update
     *   }
     * })
     */
    upsert<T extends SpreadUpsertArgs>(args: SelectSubset<T, SpreadUpsertArgs<ExtArgs>>): Prisma__SpreadClient<$Result.GetResult<Prisma.$SpreadPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Spreads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpreadCountArgs} args - Arguments to filter Spreads to count.
     * @example
     * // Count the number of Spreads
     * const count = await prisma.spread.count({
     *   where: {
     *     // ... the filter for the Spreads we want to count
     *   }
     * })
    **/
    count<T extends SpreadCountArgs>(
      args?: Subset<T, SpreadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpreadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Spread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpreadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpreadAggregateArgs>(args: Subset<T, SpreadAggregateArgs>): Prisma.PrismaPromise<GetSpreadAggregateType<T>>

    /**
     * Group by Spread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpreadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpreadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpreadGroupByArgs['orderBy'] }
        : { orderBy?: SpreadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpreadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpreadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Spread model
   */
  readonly fields: SpreadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Spread.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpreadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    divinations<T extends Spread$divinationsArgs<ExtArgs> = {}>(args?: Subset<T, Spread$divinationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DivinationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Spread model
   */ 
  interface SpreadFieldRefs {
    readonly id: FieldRef<"Spread", 'Int'>
    readonly name: FieldRef<"Spread", 'String'>
    readonly description: FieldRef<"Spread", 'String'>
    readonly positions: FieldRef<"Spread", 'String'>
    readonly cardCount: FieldRef<"Spread", 'Int'>
    readonly createdAt: FieldRef<"Spread", 'DateTime'>
    readonly updatedAt: FieldRef<"Spread", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Spread findUnique
   */
  export type SpreadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spread
     */
    select?: SpreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpreadInclude<ExtArgs> | null
    /**
     * Filter, which Spread to fetch.
     */
    where: SpreadWhereUniqueInput
  }

  /**
   * Spread findUniqueOrThrow
   */
  export type SpreadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spread
     */
    select?: SpreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpreadInclude<ExtArgs> | null
    /**
     * Filter, which Spread to fetch.
     */
    where: SpreadWhereUniqueInput
  }

  /**
   * Spread findFirst
   */
  export type SpreadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spread
     */
    select?: SpreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpreadInclude<ExtArgs> | null
    /**
     * Filter, which Spread to fetch.
     */
    where?: SpreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spreads to fetch.
     */
    orderBy?: SpreadOrderByWithRelationInput | SpreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Spreads.
     */
    cursor?: SpreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Spreads.
     */
    distinct?: SpreadScalarFieldEnum | SpreadScalarFieldEnum[]
  }

  /**
   * Spread findFirstOrThrow
   */
  export type SpreadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spread
     */
    select?: SpreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpreadInclude<ExtArgs> | null
    /**
     * Filter, which Spread to fetch.
     */
    where?: SpreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spreads to fetch.
     */
    orderBy?: SpreadOrderByWithRelationInput | SpreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Spreads.
     */
    cursor?: SpreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Spreads.
     */
    distinct?: SpreadScalarFieldEnum | SpreadScalarFieldEnum[]
  }

  /**
   * Spread findMany
   */
  export type SpreadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spread
     */
    select?: SpreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpreadInclude<ExtArgs> | null
    /**
     * Filter, which Spreads to fetch.
     */
    where?: SpreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spreads to fetch.
     */
    orderBy?: SpreadOrderByWithRelationInput | SpreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Spreads.
     */
    cursor?: SpreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spreads.
     */
    skip?: number
    distinct?: SpreadScalarFieldEnum | SpreadScalarFieldEnum[]
  }

  /**
   * Spread create
   */
  export type SpreadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spread
     */
    select?: SpreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpreadInclude<ExtArgs> | null
    /**
     * The data needed to create a Spread.
     */
    data: XOR<SpreadCreateInput, SpreadUncheckedCreateInput>
  }

  /**
   * Spread createMany
   */
  export type SpreadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Spreads.
     */
    data: SpreadCreateManyInput | SpreadCreateManyInput[]
  }

  /**
   * Spread createManyAndReturn
   */
  export type SpreadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spread
     */
    select?: SpreadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Spreads.
     */
    data: SpreadCreateManyInput | SpreadCreateManyInput[]
  }

  /**
   * Spread update
   */
  export type SpreadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spread
     */
    select?: SpreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpreadInclude<ExtArgs> | null
    /**
     * The data needed to update a Spread.
     */
    data: XOR<SpreadUpdateInput, SpreadUncheckedUpdateInput>
    /**
     * Choose, which Spread to update.
     */
    where: SpreadWhereUniqueInput
  }

  /**
   * Spread updateMany
   */
  export type SpreadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Spreads.
     */
    data: XOR<SpreadUpdateManyMutationInput, SpreadUncheckedUpdateManyInput>
    /**
     * Filter which Spreads to update
     */
    where?: SpreadWhereInput
  }

  /**
   * Spread upsert
   */
  export type SpreadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spread
     */
    select?: SpreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpreadInclude<ExtArgs> | null
    /**
     * The filter to search for the Spread to update in case it exists.
     */
    where: SpreadWhereUniqueInput
    /**
     * In case the Spread found by the `where` argument doesn't exist, create a new Spread with this data.
     */
    create: XOR<SpreadCreateInput, SpreadUncheckedCreateInput>
    /**
     * In case the Spread was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpreadUpdateInput, SpreadUncheckedUpdateInput>
  }

  /**
   * Spread delete
   */
  export type SpreadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spread
     */
    select?: SpreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpreadInclude<ExtArgs> | null
    /**
     * Filter which Spread to delete.
     */
    where: SpreadWhereUniqueInput
  }

  /**
   * Spread deleteMany
   */
  export type SpreadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Spreads to delete
     */
    where?: SpreadWhereInput
  }

  /**
   * Spread.divinations
   */
  export type Spread$divinationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Divination
     */
    select?: DivinationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationInclude<ExtArgs> | null
    where?: DivinationWhereInput
    orderBy?: DivinationOrderByWithRelationInput | DivinationOrderByWithRelationInput[]
    cursor?: DivinationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DivinationScalarFieldEnum | DivinationScalarFieldEnum[]
  }

  /**
   * Spread without action
   */
  export type SpreadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spread
     */
    select?: SpreadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpreadInclude<ExtArgs> | null
  }


  /**
   * Model Divination
   */

  export type AggregateDivination = {
    _count: DivinationCountAggregateOutputType | null
    _avg: DivinationAvgAggregateOutputType | null
    _sum: DivinationSumAggregateOutputType | null
    _min: DivinationMinAggregateOutputType | null
    _max: DivinationMaxAggregateOutputType | null
  }

  export type DivinationAvgAggregateOutputType = {
    spreadId: number | null
  }

  export type DivinationSumAggregateOutputType = {
    spreadId: number | null
  }

  export type DivinationMinAggregateOutputType = {
    id: string | null
    question: string | null
    spreadId: number | null
    questionAnalysis: string | null
    spreadRecommendation: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DivinationMaxAggregateOutputType = {
    id: string | null
    question: string | null
    spreadId: number | null
    questionAnalysis: string | null
    spreadRecommendation: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DivinationCountAggregateOutputType = {
    id: number
    question: number
    spreadId: number
    questionAnalysis: number
    spreadRecommendation: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DivinationAvgAggregateInputType = {
    spreadId?: true
  }

  export type DivinationSumAggregateInputType = {
    spreadId?: true
  }

  export type DivinationMinAggregateInputType = {
    id?: true
    question?: true
    spreadId?: true
    questionAnalysis?: true
    spreadRecommendation?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DivinationMaxAggregateInputType = {
    id?: true
    question?: true
    spreadId?: true
    questionAnalysis?: true
    spreadRecommendation?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DivinationCountAggregateInputType = {
    id?: true
    question?: true
    spreadId?: true
    questionAnalysis?: true
    spreadRecommendation?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DivinationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Divination to aggregate.
     */
    where?: DivinationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Divinations to fetch.
     */
    orderBy?: DivinationOrderByWithRelationInput | DivinationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DivinationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Divinations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Divinations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Divinations
    **/
    _count?: true | DivinationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DivinationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DivinationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DivinationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DivinationMaxAggregateInputType
  }

  export type GetDivinationAggregateType<T extends DivinationAggregateArgs> = {
        [P in keyof T & keyof AggregateDivination]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDivination[P]>
      : GetScalarType<T[P], AggregateDivination[P]>
  }




  export type DivinationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DivinationWhereInput
    orderBy?: DivinationOrderByWithAggregationInput | DivinationOrderByWithAggregationInput[]
    by: DivinationScalarFieldEnum[] | DivinationScalarFieldEnum
    having?: DivinationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DivinationCountAggregateInputType | true
    _avg?: DivinationAvgAggregateInputType
    _sum?: DivinationSumAggregateInputType
    _min?: DivinationMinAggregateInputType
    _max?: DivinationMaxAggregateInputType
  }

  export type DivinationGroupByOutputType = {
    id: string
    question: string
    spreadId: number
    questionAnalysis: string
    spreadRecommendation: string
    createdAt: Date
    updatedAt: Date
    _count: DivinationCountAggregateOutputType | null
    _avg: DivinationAvgAggregateOutputType | null
    _sum: DivinationSumAggregateOutputType | null
    _min: DivinationMinAggregateOutputType | null
    _max: DivinationMaxAggregateOutputType | null
  }

  type GetDivinationGroupByPayload<T extends DivinationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DivinationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DivinationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DivinationGroupByOutputType[P]>
            : GetScalarType<T[P], DivinationGroupByOutputType[P]>
        }
      >
    >


  export type DivinationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    spreadId?: boolean
    questionAnalysis?: boolean
    spreadRecommendation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    spread?: boolean | SpreadDefaultArgs<ExtArgs>
    divinationCards?: boolean | Divination$divinationCardsArgs<ExtArgs>
    _count?: boolean | DivinationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["divination"]>

  export type DivinationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    spreadId?: boolean
    questionAnalysis?: boolean
    spreadRecommendation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    spread?: boolean | SpreadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["divination"]>

  export type DivinationSelectScalar = {
    id?: boolean
    question?: boolean
    spreadId?: boolean
    questionAnalysis?: boolean
    spreadRecommendation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DivinationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spread?: boolean | SpreadDefaultArgs<ExtArgs>
    divinationCards?: boolean | Divination$divinationCardsArgs<ExtArgs>
    _count?: boolean | DivinationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DivinationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    spread?: boolean | SpreadDefaultArgs<ExtArgs>
  }

  export type $DivinationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Divination"
    objects: {
      spread: Prisma.$SpreadPayload<ExtArgs>
      divinationCards: Prisma.$DivinationCardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      question: string
      spreadId: number
      questionAnalysis: string
      spreadRecommendation: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["divination"]>
    composites: {}
  }

  type DivinationGetPayload<S extends boolean | null | undefined | DivinationDefaultArgs> = $Result.GetResult<Prisma.$DivinationPayload, S>

  type DivinationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DivinationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DivinationCountAggregateInputType | true
    }

  export interface DivinationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Divination'], meta: { name: 'Divination' } }
    /**
     * Find zero or one Divination that matches the filter.
     * @param {DivinationFindUniqueArgs} args - Arguments to find a Divination
     * @example
     * // Get one Divination
     * const divination = await prisma.divination.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DivinationFindUniqueArgs>(args: SelectSubset<T, DivinationFindUniqueArgs<ExtArgs>>): Prisma__DivinationClient<$Result.GetResult<Prisma.$DivinationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Divination that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DivinationFindUniqueOrThrowArgs} args - Arguments to find a Divination
     * @example
     * // Get one Divination
     * const divination = await prisma.divination.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DivinationFindUniqueOrThrowArgs>(args: SelectSubset<T, DivinationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DivinationClient<$Result.GetResult<Prisma.$DivinationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Divination that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivinationFindFirstArgs} args - Arguments to find a Divination
     * @example
     * // Get one Divination
     * const divination = await prisma.divination.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DivinationFindFirstArgs>(args?: SelectSubset<T, DivinationFindFirstArgs<ExtArgs>>): Prisma__DivinationClient<$Result.GetResult<Prisma.$DivinationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Divination that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivinationFindFirstOrThrowArgs} args - Arguments to find a Divination
     * @example
     * // Get one Divination
     * const divination = await prisma.divination.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DivinationFindFirstOrThrowArgs>(args?: SelectSubset<T, DivinationFindFirstOrThrowArgs<ExtArgs>>): Prisma__DivinationClient<$Result.GetResult<Prisma.$DivinationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Divinations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivinationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Divinations
     * const divinations = await prisma.divination.findMany()
     * 
     * // Get first 10 Divinations
     * const divinations = await prisma.divination.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const divinationWithIdOnly = await prisma.divination.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DivinationFindManyArgs>(args?: SelectSubset<T, DivinationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DivinationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Divination.
     * @param {DivinationCreateArgs} args - Arguments to create a Divination.
     * @example
     * // Create one Divination
     * const Divination = await prisma.divination.create({
     *   data: {
     *     // ... data to create a Divination
     *   }
     * })
     * 
     */
    create<T extends DivinationCreateArgs>(args: SelectSubset<T, DivinationCreateArgs<ExtArgs>>): Prisma__DivinationClient<$Result.GetResult<Prisma.$DivinationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Divinations.
     * @param {DivinationCreateManyArgs} args - Arguments to create many Divinations.
     * @example
     * // Create many Divinations
     * const divination = await prisma.divination.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DivinationCreateManyArgs>(args?: SelectSubset<T, DivinationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Divinations and returns the data saved in the database.
     * @param {DivinationCreateManyAndReturnArgs} args - Arguments to create many Divinations.
     * @example
     * // Create many Divinations
     * const divination = await prisma.divination.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Divinations and only return the `id`
     * const divinationWithIdOnly = await prisma.divination.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DivinationCreateManyAndReturnArgs>(args?: SelectSubset<T, DivinationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DivinationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Divination.
     * @param {DivinationDeleteArgs} args - Arguments to delete one Divination.
     * @example
     * // Delete one Divination
     * const Divination = await prisma.divination.delete({
     *   where: {
     *     // ... filter to delete one Divination
     *   }
     * })
     * 
     */
    delete<T extends DivinationDeleteArgs>(args: SelectSubset<T, DivinationDeleteArgs<ExtArgs>>): Prisma__DivinationClient<$Result.GetResult<Prisma.$DivinationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Divination.
     * @param {DivinationUpdateArgs} args - Arguments to update one Divination.
     * @example
     * // Update one Divination
     * const divination = await prisma.divination.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DivinationUpdateArgs>(args: SelectSubset<T, DivinationUpdateArgs<ExtArgs>>): Prisma__DivinationClient<$Result.GetResult<Prisma.$DivinationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Divinations.
     * @param {DivinationDeleteManyArgs} args - Arguments to filter Divinations to delete.
     * @example
     * // Delete a few Divinations
     * const { count } = await prisma.divination.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DivinationDeleteManyArgs>(args?: SelectSubset<T, DivinationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Divinations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivinationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Divinations
     * const divination = await prisma.divination.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DivinationUpdateManyArgs>(args: SelectSubset<T, DivinationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Divination.
     * @param {DivinationUpsertArgs} args - Arguments to update or create a Divination.
     * @example
     * // Update or create a Divination
     * const divination = await prisma.divination.upsert({
     *   create: {
     *     // ... data to create a Divination
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Divination we want to update
     *   }
     * })
     */
    upsert<T extends DivinationUpsertArgs>(args: SelectSubset<T, DivinationUpsertArgs<ExtArgs>>): Prisma__DivinationClient<$Result.GetResult<Prisma.$DivinationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Divinations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivinationCountArgs} args - Arguments to filter Divinations to count.
     * @example
     * // Count the number of Divinations
     * const count = await prisma.divination.count({
     *   where: {
     *     // ... the filter for the Divinations we want to count
     *   }
     * })
    **/
    count<T extends DivinationCountArgs>(
      args?: Subset<T, DivinationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DivinationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Divination.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivinationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DivinationAggregateArgs>(args: Subset<T, DivinationAggregateArgs>): Prisma.PrismaPromise<GetDivinationAggregateType<T>>

    /**
     * Group by Divination.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivinationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DivinationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DivinationGroupByArgs['orderBy'] }
        : { orderBy?: DivinationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DivinationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDivinationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Divination model
   */
  readonly fields: DivinationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Divination.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DivinationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    spread<T extends SpreadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpreadDefaultArgs<ExtArgs>>): Prisma__SpreadClient<$Result.GetResult<Prisma.$SpreadPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    divinationCards<T extends Divination$divinationCardsArgs<ExtArgs> = {}>(args?: Subset<T, Divination$divinationCardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DivinationCardPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Divination model
   */ 
  interface DivinationFieldRefs {
    readonly id: FieldRef<"Divination", 'String'>
    readonly question: FieldRef<"Divination", 'String'>
    readonly spreadId: FieldRef<"Divination", 'Int'>
    readonly questionAnalysis: FieldRef<"Divination", 'String'>
    readonly spreadRecommendation: FieldRef<"Divination", 'String'>
    readonly createdAt: FieldRef<"Divination", 'DateTime'>
    readonly updatedAt: FieldRef<"Divination", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Divination findUnique
   */
  export type DivinationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Divination
     */
    select?: DivinationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationInclude<ExtArgs> | null
    /**
     * Filter, which Divination to fetch.
     */
    where: DivinationWhereUniqueInput
  }

  /**
   * Divination findUniqueOrThrow
   */
  export type DivinationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Divination
     */
    select?: DivinationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationInclude<ExtArgs> | null
    /**
     * Filter, which Divination to fetch.
     */
    where: DivinationWhereUniqueInput
  }

  /**
   * Divination findFirst
   */
  export type DivinationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Divination
     */
    select?: DivinationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationInclude<ExtArgs> | null
    /**
     * Filter, which Divination to fetch.
     */
    where?: DivinationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Divinations to fetch.
     */
    orderBy?: DivinationOrderByWithRelationInput | DivinationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Divinations.
     */
    cursor?: DivinationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Divinations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Divinations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Divinations.
     */
    distinct?: DivinationScalarFieldEnum | DivinationScalarFieldEnum[]
  }

  /**
   * Divination findFirstOrThrow
   */
  export type DivinationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Divination
     */
    select?: DivinationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationInclude<ExtArgs> | null
    /**
     * Filter, which Divination to fetch.
     */
    where?: DivinationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Divinations to fetch.
     */
    orderBy?: DivinationOrderByWithRelationInput | DivinationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Divinations.
     */
    cursor?: DivinationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Divinations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Divinations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Divinations.
     */
    distinct?: DivinationScalarFieldEnum | DivinationScalarFieldEnum[]
  }

  /**
   * Divination findMany
   */
  export type DivinationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Divination
     */
    select?: DivinationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationInclude<ExtArgs> | null
    /**
     * Filter, which Divinations to fetch.
     */
    where?: DivinationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Divinations to fetch.
     */
    orderBy?: DivinationOrderByWithRelationInput | DivinationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Divinations.
     */
    cursor?: DivinationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Divinations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Divinations.
     */
    skip?: number
    distinct?: DivinationScalarFieldEnum | DivinationScalarFieldEnum[]
  }

  /**
   * Divination create
   */
  export type DivinationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Divination
     */
    select?: DivinationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationInclude<ExtArgs> | null
    /**
     * The data needed to create a Divination.
     */
    data: XOR<DivinationCreateInput, DivinationUncheckedCreateInput>
  }

  /**
   * Divination createMany
   */
  export type DivinationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Divinations.
     */
    data: DivinationCreateManyInput | DivinationCreateManyInput[]
  }

  /**
   * Divination createManyAndReturn
   */
  export type DivinationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Divination
     */
    select?: DivinationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Divinations.
     */
    data: DivinationCreateManyInput | DivinationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Divination update
   */
  export type DivinationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Divination
     */
    select?: DivinationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationInclude<ExtArgs> | null
    /**
     * The data needed to update a Divination.
     */
    data: XOR<DivinationUpdateInput, DivinationUncheckedUpdateInput>
    /**
     * Choose, which Divination to update.
     */
    where: DivinationWhereUniqueInput
  }

  /**
   * Divination updateMany
   */
  export type DivinationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Divinations.
     */
    data: XOR<DivinationUpdateManyMutationInput, DivinationUncheckedUpdateManyInput>
    /**
     * Filter which Divinations to update
     */
    where?: DivinationWhereInput
  }

  /**
   * Divination upsert
   */
  export type DivinationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Divination
     */
    select?: DivinationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationInclude<ExtArgs> | null
    /**
     * The filter to search for the Divination to update in case it exists.
     */
    where: DivinationWhereUniqueInput
    /**
     * In case the Divination found by the `where` argument doesn't exist, create a new Divination with this data.
     */
    create: XOR<DivinationCreateInput, DivinationUncheckedCreateInput>
    /**
     * In case the Divination was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DivinationUpdateInput, DivinationUncheckedUpdateInput>
  }

  /**
   * Divination delete
   */
  export type DivinationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Divination
     */
    select?: DivinationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationInclude<ExtArgs> | null
    /**
     * Filter which Divination to delete.
     */
    where: DivinationWhereUniqueInput
  }

  /**
   * Divination deleteMany
   */
  export type DivinationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Divinations to delete
     */
    where?: DivinationWhereInput
  }

  /**
   * Divination.divinationCards
   */
  export type Divination$divinationCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivinationCard
     */
    select?: DivinationCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationCardInclude<ExtArgs> | null
    where?: DivinationCardWhereInput
    orderBy?: DivinationCardOrderByWithRelationInput | DivinationCardOrderByWithRelationInput[]
    cursor?: DivinationCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DivinationCardScalarFieldEnum | DivinationCardScalarFieldEnum[]
  }

  /**
   * Divination without action
   */
  export type DivinationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Divination
     */
    select?: DivinationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationInclude<ExtArgs> | null
  }


  /**
   * Model DivinationCard
   */

  export type AggregateDivinationCard = {
    _count: DivinationCardCountAggregateOutputType | null
    _avg: DivinationCardAvgAggregateOutputType | null
    _sum: DivinationCardSumAggregateOutputType | null
    _min: DivinationCardMinAggregateOutputType | null
    _max: DivinationCardMaxAggregateOutputType | null
  }

  export type DivinationCardAvgAggregateOutputType = {
    cardId: number | null
  }

  export type DivinationCardSumAggregateOutputType = {
    cardId: number | null
  }

  export type DivinationCardMinAggregateOutputType = {
    id: string | null
    divinationId: string | null
    cardId: number | null
    position: string | null
    isReversed: boolean | null
    interpretation: string | null
    createdAt: Date | null
  }

  export type DivinationCardMaxAggregateOutputType = {
    id: string | null
    divinationId: string | null
    cardId: number | null
    position: string | null
    isReversed: boolean | null
    interpretation: string | null
    createdAt: Date | null
  }

  export type DivinationCardCountAggregateOutputType = {
    id: number
    divinationId: number
    cardId: number
    position: number
    isReversed: number
    interpretation: number
    createdAt: number
    _all: number
  }


  export type DivinationCardAvgAggregateInputType = {
    cardId?: true
  }

  export type DivinationCardSumAggregateInputType = {
    cardId?: true
  }

  export type DivinationCardMinAggregateInputType = {
    id?: true
    divinationId?: true
    cardId?: true
    position?: true
    isReversed?: true
    interpretation?: true
    createdAt?: true
  }

  export type DivinationCardMaxAggregateInputType = {
    id?: true
    divinationId?: true
    cardId?: true
    position?: true
    isReversed?: true
    interpretation?: true
    createdAt?: true
  }

  export type DivinationCardCountAggregateInputType = {
    id?: true
    divinationId?: true
    cardId?: true
    position?: true
    isReversed?: true
    interpretation?: true
    createdAt?: true
    _all?: true
  }

  export type DivinationCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DivinationCard to aggregate.
     */
    where?: DivinationCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DivinationCards to fetch.
     */
    orderBy?: DivinationCardOrderByWithRelationInput | DivinationCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DivinationCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DivinationCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DivinationCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DivinationCards
    **/
    _count?: true | DivinationCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DivinationCardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DivinationCardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DivinationCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DivinationCardMaxAggregateInputType
  }

  export type GetDivinationCardAggregateType<T extends DivinationCardAggregateArgs> = {
        [P in keyof T & keyof AggregateDivinationCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDivinationCard[P]>
      : GetScalarType<T[P], AggregateDivinationCard[P]>
  }




  export type DivinationCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DivinationCardWhereInput
    orderBy?: DivinationCardOrderByWithAggregationInput | DivinationCardOrderByWithAggregationInput[]
    by: DivinationCardScalarFieldEnum[] | DivinationCardScalarFieldEnum
    having?: DivinationCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DivinationCardCountAggregateInputType | true
    _avg?: DivinationCardAvgAggregateInputType
    _sum?: DivinationCardSumAggregateInputType
    _min?: DivinationCardMinAggregateInputType
    _max?: DivinationCardMaxAggregateInputType
  }

  export type DivinationCardGroupByOutputType = {
    id: string
    divinationId: string
    cardId: number
    position: string
    isReversed: boolean
    interpretation: string
    createdAt: Date
    _count: DivinationCardCountAggregateOutputType | null
    _avg: DivinationCardAvgAggregateOutputType | null
    _sum: DivinationCardSumAggregateOutputType | null
    _min: DivinationCardMinAggregateOutputType | null
    _max: DivinationCardMaxAggregateOutputType | null
  }

  type GetDivinationCardGroupByPayload<T extends DivinationCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DivinationCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DivinationCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DivinationCardGroupByOutputType[P]>
            : GetScalarType<T[P], DivinationCardGroupByOutputType[P]>
        }
      >
    >


  export type DivinationCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    divinationId?: boolean
    cardId?: boolean
    position?: boolean
    isReversed?: boolean
    interpretation?: boolean
    createdAt?: boolean
    divination?: boolean | DivinationDefaultArgs<ExtArgs>
    card?: boolean | TarotCardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["divinationCard"]>

  export type DivinationCardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    divinationId?: boolean
    cardId?: boolean
    position?: boolean
    isReversed?: boolean
    interpretation?: boolean
    createdAt?: boolean
    divination?: boolean | DivinationDefaultArgs<ExtArgs>
    card?: boolean | TarotCardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["divinationCard"]>

  export type DivinationCardSelectScalar = {
    id?: boolean
    divinationId?: boolean
    cardId?: boolean
    position?: boolean
    isReversed?: boolean
    interpretation?: boolean
    createdAt?: boolean
  }

  export type DivinationCardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    divination?: boolean | DivinationDefaultArgs<ExtArgs>
    card?: boolean | TarotCardDefaultArgs<ExtArgs>
  }
  export type DivinationCardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    divination?: boolean | DivinationDefaultArgs<ExtArgs>
    card?: boolean | TarotCardDefaultArgs<ExtArgs>
  }

  export type $DivinationCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DivinationCard"
    objects: {
      divination: Prisma.$DivinationPayload<ExtArgs>
      card: Prisma.$TarotCardPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      divinationId: string
      cardId: number
      position: string
      isReversed: boolean
      interpretation: string
      createdAt: Date
    }, ExtArgs["result"]["divinationCard"]>
    composites: {}
  }

  type DivinationCardGetPayload<S extends boolean | null | undefined | DivinationCardDefaultArgs> = $Result.GetResult<Prisma.$DivinationCardPayload, S>

  type DivinationCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DivinationCardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DivinationCardCountAggregateInputType | true
    }

  export interface DivinationCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DivinationCard'], meta: { name: 'DivinationCard' } }
    /**
     * Find zero or one DivinationCard that matches the filter.
     * @param {DivinationCardFindUniqueArgs} args - Arguments to find a DivinationCard
     * @example
     * // Get one DivinationCard
     * const divinationCard = await prisma.divinationCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DivinationCardFindUniqueArgs>(args: SelectSubset<T, DivinationCardFindUniqueArgs<ExtArgs>>): Prisma__DivinationCardClient<$Result.GetResult<Prisma.$DivinationCardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DivinationCard that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DivinationCardFindUniqueOrThrowArgs} args - Arguments to find a DivinationCard
     * @example
     * // Get one DivinationCard
     * const divinationCard = await prisma.divinationCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DivinationCardFindUniqueOrThrowArgs>(args: SelectSubset<T, DivinationCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DivinationCardClient<$Result.GetResult<Prisma.$DivinationCardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DivinationCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivinationCardFindFirstArgs} args - Arguments to find a DivinationCard
     * @example
     * // Get one DivinationCard
     * const divinationCard = await prisma.divinationCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DivinationCardFindFirstArgs>(args?: SelectSubset<T, DivinationCardFindFirstArgs<ExtArgs>>): Prisma__DivinationCardClient<$Result.GetResult<Prisma.$DivinationCardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DivinationCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivinationCardFindFirstOrThrowArgs} args - Arguments to find a DivinationCard
     * @example
     * // Get one DivinationCard
     * const divinationCard = await prisma.divinationCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DivinationCardFindFirstOrThrowArgs>(args?: SelectSubset<T, DivinationCardFindFirstOrThrowArgs<ExtArgs>>): Prisma__DivinationCardClient<$Result.GetResult<Prisma.$DivinationCardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DivinationCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivinationCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DivinationCards
     * const divinationCards = await prisma.divinationCard.findMany()
     * 
     * // Get first 10 DivinationCards
     * const divinationCards = await prisma.divinationCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const divinationCardWithIdOnly = await prisma.divinationCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DivinationCardFindManyArgs>(args?: SelectSubset<T, DivinationCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DivinationCardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DivinationCard.
     * @param {DivinationCardCreateArgs} args - Arguments to create a DivinationCard.
     * @example
     * // Create one DivinationCard
     * const DivinationCard = await prisma.divinationCard.create({
     *   data: {
     *     // ... data to create a DivinationCard
     *   }
     * })
     * 
     */
    create<T extends DivinationCardCreateArgs>(args: SelectSubset<T, DivinationCardCreateArgs<ExtArgs>>): Prisma__DivinationCardClient<$Result.GetResult<Prisma.$DivinationCardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DivinationCards.
     * @param {DivinationCardCreateManyArgs} args - Arguments to create many DivinationCards.
     * @example
     * // Create many DivinationCards
     * const divinationCard = await prisma.divinationCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DivinationCardCreateManyArgs>(args?: SelectSubset<T, DivinationCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DivinationCards and returns the data saved in the database.
     * @param {DivinationCardCreateManyAndReturnArgs} args - Arguments to create many DivinationCards.
     * @example
     * // Create many DivinationCards
     * const divinationCard = await prisma.divinationCard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DivinationCards and only return the `id`
     * const divinationCardWithIdOnly = await prisma.divinationCard.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DivinationCardCreateManyAndReturnArgs>(args?: SelectSubset<T, DivinationCardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DivinationCardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DivinationCard.
     * @param {DivinationCardDeleteArgs} args - Arguments to delete one DivinationCard.
     * @example
     * // Delete one DivinationCard
     * const DivinationCard = await prisma.divinationCard.delete({
     *   where: {
     *     // ... filter to delete one DivinationCard
     *   }
     * })
     * 
     */
    delete<T extends DivinationCardDeleteArgs>(args: SelectSubset<T, DivinationCardDeleteArgs<ExtArgs>>): Prisma__DivinationCardClient<$Result.GetResult<Prisma.$DivinationCardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DivinationCard.
     * @param {DivinationCardUpdateArgs} args - Arguments to update one DivinationCard.
     * @example
     * // Update one DivinationCard
     * const divinationCard = await prisma.divinationCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DivinationCardUpdateArgs>(args: SelectSubset<T, DivinationCardUpdateArgs<ExtArgs>>): Prisma__DivinationCardClient<$Result.GetResult<Prisma.$DivinationCardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DivinationCards.
     * @param {DivinationCardDeleteManyArgs} args - Arguments to filter DivinationCards to delete.
     * @example
     * // Delete a few DivinationCards
     * const { count } = await prisma.divinationCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DivinationCardDeleteManyArgs>(args?: SelectSubset<T, DivinationCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DivinationCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivinationCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DivinationCards
     * const divinationCard = await prisma.divinationCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DivinationCardUpdateManyArgs>(args: SelectSubset<T, DivinationCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DivinationCard.
     * @param {DivinationCardUpsertArgs} args - Arguments to update or create a DivinationCard.
     * @example
     * // Update or create a DivinationCard
     * const divinationCard = await prisma.divinationCard.upsert({
     *   create: {
     *     // ... data to create a DivinationCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DivinationCard we want to update
     *   }
     * })
     */
    upsert<T extends DivinationCardUpsertArgs>(args: SelectSubset<T, DivinationCardUpsertArgs<ExtArgs>>): Prisma__DivinationCardClient<$Result.GetResult<Prisma.$DivinationCardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DivinationCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivinationCardCountArgs} args - Arguments to filter DivinationCards to count.
     * @example
     * // Count the number of DivinationCards
     * const count = await prisma.divinationCard.count({
     *   where: {
     *     // ... the filter for the DivinationCards we want to count
     *   }
     * })
    **/
    count<T extends DivinationCardCountArgs>(
      args?: Subset<T, DivinationCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DivinationCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DivinationCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivinationCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DivinationCardAggregateArgs>(args: Subset<T, DivinationCardAggregateArgs>): Prisma.PrismaPromise<GetDivinationCardAggregateType<T>>

    /**
     * Group by DivinationCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivinationCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DivinationCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DivinationCardGroupByArgs['orderBy'] }
        : { orderBy?: DivinationCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DivinationCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDivinationCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DivinationCard model
   */
  readonly fields: DivinationCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DivinationCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DivinationCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    divination<T extends DivinationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DivinationDefaultArgs<ExtArgs>>): Prisma__DivinationClient<$Result.GetResult<Prisma.$DivinationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    card<T extends TarotCardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TarotCardDefaultArgs<ExtArgs>>): Prisma__TarotCardClient<$Result.GetResult<Prisma.$TarotCardPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DivinationCard model
   */ 
  interface DivinationCardFieldRefs {
    readonly id: FieldRef<"DivinationCard", 'String'>
    readonly divinationId: FieldRef<"DivinationCard", 'String'>
    readonly cardId: FieldRef<"DivinationCard", 'Int'>
    readonly position: FieldRef<"DivinationCard", 'String'>
    readonly isReversed: FieldRef<"DivinationCard", 'Boolean'>
    readonly interpretation: FieldRef<"DivinationCard", 'String'>
    readonly createdAt: FieldRef<"DivinationCard", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DivinationCard findUnique
   */
  export type DivinationCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivinationCard
     */
    select?: DivinationCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationCardInclude<ExtArgs> | null
    /**
     * Filter, which DivinationCard to fetch.
     */
    where: DivinationCardWhereUniqueInput
  }

  /**
   * DivinationCard findUniqueOrThrow
   */
  export type DivinationCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivinationCard
     */
    select?: DivinationCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationCardInclude<ExtArgs> | null
    /**
     * Filter, which DivinationCard to fetch.
     */
    where: DivinationCardWhereUniqueInput
  }

  /**
   * DivinationCard findFirst
   */
  export type DivinationCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivinationCard
     */
    select?: DivinationCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationCardInclude<ExtArgs> | null
    /**
     * Filter, which DivinationCard to fetch.
     */
    where?: DivinationCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DivinationCards to fetch.
     */
    orderBy?: DivinationCardOrderByWithRelationInput | DivinationCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DivinationCards.
     */
    cursor?: DivinationCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DivinationCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DivinationCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DivinationCards.
     */
    distinct?: DivinationCardScalarFieldEnum | DivinationCardScalarFieldEnum[]
  }

  /**
   * DivinationCard findFirstOrThrow
   */
  export type DivinationCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivinationCard
     */
    select?: DivinationCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationCardInclude<ExtArgs> | null
    /**
     * Filter, which DivinationCard to fetch.
     */
    where?: DivinationCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DivinationCards to fetch.
     */
    orderBy?: DivinationCardOrderByWithRelationInput | DivinationCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DivinationCards.
     */
    cursor?: DivinationCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DivinationCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DivinationCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DivinationCards.
     */
    distinct?: DivinationCardScalarFieldEnum | DivinationCardScalarFieldEnum[]
  }

  /**
   * DivinationCard findMany
   */
  export type DivinationCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivinationCard
     */
    select?: DivinationCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationCardInclude<ExtArgs> | null
    /**
     * Filter, which DivinationCards to fetch.
     */
    where?: DivinationCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DivinationCards to fetch.
     */
    orderBy?: DivinationCardOrderByWithRelationInput | DivinationCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DivinationCards.
     */
    cursor?: DivinationCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DivinationCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DivinationCards.
     */
    skip?: number
    distinct?: DivinationCardScalarFieldEnum | DivinationCardScalarFieldEnum[]
  }

  /**
   * DivinationCard create
   */
  export type DivinationCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivinationCard
     */
    select?: DivinationCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationCardInclude<ExtArgs> | null
    /**
     * The data needed to create a DivinationCard.
     */
    data: XOR<DivinationCardCreateInput, DivinationCardUncheckedCreateInput>
  }

  /**
   * DivinationCard createMany
   */
  export type DivinationCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DivinationCards.
     */
    data: DivinationCardCreateManyInput | DivinationCardCreateManyInput[]
  }

  /**
   * DivinationCard createManyAndReturn
   */
  export type DivinationCardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivinationCard
     */
    select?: DivinationCardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DivinationCards.
     */
    data: DivinationCardCreateManyInput | DivinationCardCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationCardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DivinationCard update
   */
  export type DivinationCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivinationCard
     */
    select?: DivinationCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationCardInclude<ExtArgs> | null
    /**
     * The data needed to update a DivinationCard.
     */
    data: XOR<DivinationCardUpdateInput, DivinationCardUncheckedUpdateInput>
    /**
     * Choose, which DivinationCard to update.
     */
    where: DivinationCardWhereUniqueInput
  }

  /**
   * DivinationCard updateMany
   */
  export type DivinationCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DivinationCards.
     */
    data: XOR<DivinationCardUpdateManyMutationInput, DivinationCardUncheckedUpdateManyInput>
    /**
     * Filter which DivinationCards to update
     */
    where?: DivinationCardWhereInput
  }

  /**
   * DivinationCard upsert
   */
  export type DivinationCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivinationCard
     */
    select?: DivinationCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationCardInclude<ExtArgs> | null
    /**
     * The filter to search for the DivinationCard to update in case it exists.
     */
    where: DivinationCardWhereUniqueInput
    /**
     * In case the DivinationCard found by the `where` argument doesn't exist, create a new DivinationCard with this data.
     */
    create: XOR<DivinationCardCreateInput, DivinationCardUncheckedCreateInput>
    /**
     * In case the DivinationCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DivinationCardUpdateInput, DivinationCardUncheckedUpdateInput>
  }

  /**
   * DivinationCard delete
   */
  export type DivinationCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivinationCard
     */
    select?: DivinationCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationCardInclude<ExtArgs> | null
    /**
     * Filter which DivinationCard to delete.
     */
    where: DivinationCardWhereUniqueInput
  }

  /**
   * DivinationCard deleteMany
   */
  export type DivinationCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DivinationCards to delete
     */
    where?: DivinationCardWhereInput
  }

  /**
   * DivinationCard without action
   */
  export type DivinationCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivinationCard
     */
    select?: DivinationCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivinationCardInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TarotCardScalarFieldEnum: {
    id: 'id',
    name: 'name',
    arcana: 'arcana',
    suit: 'suit',
    number: 'number',
    uprightMeaning: 'uprightMeaning',
    reversedMeaning: 'reversedMeaning',
    keywords: 'keywords',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TarotCardScalarFieldEnum = (typeof TarotCardScalarFieldEnum)[keyof typeof TarotCardScalarFieldEnum]


  export const SpreadScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    positions: 'positions',
    cardCount: 'cardCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SpreadScalarFieldEnum = (typeof SpreadScalarFieldEnum)[keyof typeof SpreadScalarFieldEnum]


  export const DivinationScalarFieldEnum: {
    id: 'id',
    question: 'question',
    spreadId: 'spreadId',
    questionAnalysis: 'questionAnalysis',
    spreadRecommendation: 'spreadRecommendation',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DivinationScalarFieldEnum = (typeof DivinationScalarFieldEnum)[keyof typeof DivinationScalarFieldEnum]


  export const DivinationCardScalarFieldEnum: {
    id: 'id',
    divinationId: 'divinationId',
    cardId: 'cardId',
    position: 'position',
    isReversed: 'isReversed',
    interpretation: 'interpretation',
    createdAt: 'createdAt'
  };

  export type DivinationCardScalarFieldEnum = (typeof DivinationCardScalarFieldEnum)[keyof typeof DivinationCardScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type TarotCardWhereInput = {
    AND?: TarotCardWhereInput | TarotCardWhereInput[]
    OR?: TarotCardWhereInput[]
    NOT?: TarotCardWhereInput | TarotCardWhereInput[]
    id?: IntFilter<"TarotCard"> | number
    name?: StringFilter<"TarotCard"> | string
    arcana?: StringFilter<"TarotCard"> | string
    suit?: StringNullableFilter<"TarotCard"> | string | null
    number?: IntNullableFilter<"TarotCard"> | number | null
    uprightMeaning?: StringFilter<"TarotCard"> | string
    reversedMeaning?: StringFilter<"TarotCard"> | string
    keywords?: StringFilter<"TarotCard"> | string
    imageUrl?: StringNullableFilter<"TarotCard"> | string | null
    createdAt?: DateTimeFilter<"TarotCard"> | Date | string
    updatedAt?: DateTimeFilter<"TarotCard"> | Date | string
    divinationCards?: DivinationCardListRelationFilter
  }

  export type TarotCardOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    arcana?: SortOrder
    suit?: SortOrderInput | SortOrder
    number?: SortOrderInput | SortOrder
    uprightMeaning?: SortOrder
    reversedMeaning?: SortOrder
    keywords?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    divinationCards?: DivinationCardOrderByRelationAggregateInput
  }

  export type TarotCardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: TarotCardWhereInput | TarotCardWhereInput[]
    OR?: TarotCardWhereInput[]
    NOT?: TarotCardWhereInput | TarotCardWhereInput[]
    arcana?: StringFilter<"TarotCard"> | string
    suit?: StringNullableFilter<"TarotCard"> | string | null
    number?: IntNullableFilter<"TarotCard"> | number | null
    uprightMeaning?: StringFilter<"TarotCard"> | string
    reversedMeaning?: StringFilter<"TarotCard"> | string
    keywords?: StringFilter<"TarotCard"> | string
    imageUrl?: StringNullableFilter<"TarotCard"> | string | null
    createdAt?: DateTimeFilter<"TarotCard"> | Date | string
    updatedAt?: DateTimeFilter<"TarotCard"> | Date | string
    divinationCards?: DivinationCardListRelationFilter
  }, "id" | "name">

  export type TarotCardOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    arcana?: SortOrder
    suit?: SortOrderInput | SortOrder
    number?: SortOrderInput | SortOrder
    uprightMeaning?: SortOrder
    reversedMeaning?: SortOrder
    keywords?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TarotCardCountOrderByAggregateInput
    _avg?: TarotCardAvgOrderByAggregateInput
    _max?: TarotCardMaxOrderByAggregateInput
    _min?: TarotCardMinOrderByAggregateInput
    _sum?: TarotCardSumOrderByAggregateInput
  }

  export type TarotCardScalarWhereWithAggregatesInput = {
    AND?: TarotCardScalarWhereWithAggregatesInput | TarotCardScalarWhereWithAggregatesInput[]
    OR?: TarotCardScalarWhereWithAggregatesInput[]
    NOT?: TarotCardScalarWhereWithAggregatesInput | TarotCardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TarotCard"> | number
    name?: StringWithAggregatesFilter<"TarotCard"> | string
    arcana?: StringWithAggregatesFilter<"TarotCard"> | string
    suit?: StringNullableWithAggregatesFilter<"TarotCard"> | string | null
    number?: IntNullableWithAggregatesFilter<"TarotCard"> | number | null
    uprightMeaning?: StringWithAggregatesFilter<"TarotCard"> | string
    reversedMeaning?: StringWithAggregatesFilter<"TarotCard"> | string
    keywords?: StringWithAggregatesFilter<"TarotCard"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"TarotCard"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TarotCard"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TarotCard"> | Date | string
  }

  export type SpreadWhereInput = {
    AND?: SpreadWhereInput | SpreadWhereInput[]
    OR?: SpreadWhereInput[]
    NOT?: SpreadWhereInput | SpreadWhereInput[]
    id?: IntFilter<"Spread"> | number
    name?: StringFilter<"Spread"> | string
    description?: StringFilter<"Spread"> | string
    positions?: StringFilter<"Spread"> | string
    cardCount?: IntFilter<"Spread"> | number
    createdAt?: DateTimeFilter<"Spread"> | Date | string
    updatedAt?: DateTimeFilter<"Spread"> | Date | string
    divinations?: DivinationListRelationFilter
  }

  export type SpreadOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    positions?: SortOrder
    cardCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    divinations?: DivinationOrderByRelationAggregateInput
  }

  export type SpreadWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: SpreadWhereInput | SpreadWhereInput[]
    OR?: SpreadWhereInput[]
    NOT?: SpreadWhereInput | SpreadWhereInput[]
    description?: StringFilter<"Spread"> | string
    positions?: StringFilter<"Spread"> | string
    cardCount?: IntFilter<"Spread"> | number
    createdAt?: DateTimeFilter<"Spread"> | Date | string
    updatedAt?: DateTimeFilter<"Spread"> | Date | string
    divinations?: DivinationListRelationFilter
  }, "id" | "name">

  export type SpreadOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    positions?: SortOrder
    cardCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SpreadCountOrderByAggregateInput
    _avg?: SpreadAvgOrderByAggregateInput
    _max?: SpreadMaxOrderByAggregateInput
    _min?: SpreadMinOrderByAggregateInput
    _sum?: SpreadSumOrderByAggregateInput
  }

  export type SpreadScalarWhereWithAggregatesInput = {
    AND?: SpreadScalarWhereWithAggregatesInput | SpreadScalarWhereWithAggregatesInput[]
    OR?: SpreadScalarWhereWithAggregatesInput[]
    NOT?: SpreadScalarWhereWithAggregatesInput | SpreadScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Spread"> | number
    name?: StringWithAggregatesFilter<"Spread"> | string
    description?: StringWithAggregatesFilter<"Spread"> | string
    positions?: StringWithAggregatesFilter<"Spread"> | string
    cardCount?: IntWithAggregatesFilter<"Spread"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Spread"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Spread"> | Date | string
  }

  export type DivinationWhereInput = {
    AND?: DivinationWhereInput | DivinationWhereInput[]
    OR?: DivinationWhereInput[]
    NOT?: DivinationWhereInput | DivinationWhereInput[]
    id?: StringFilter<"Divination"> | string
    question?: StringFilter<"Divination"> | string
    spreadId?: IntFilter<"Divination"> | number
    questionAnalysis?: StringFilter<"Divination"> | string
    spreadRecommendation?: StringFilter<"Divination"> | string
    createdAt?: DateTimeFilter<"Divination"> | Date | string
    updatedAt?: DateTimeFilter<"Divination"> | Date | string
    spread?: XOR<SpreadRelationFilter, SpreadWhereInput>
    divinationCards?: DivinationCardListRelationFilter
  }

  export type DivinationOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    spreadId?: SortOrder
    questionAnalysis?: SortOrder
    spreadRecommendation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    spread?: SpreadOrderByWithRelationInput
    divinationCards?: DivinationCardOrderByRelationAggregateInput
  }

  export type DivinationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DivinationWhereInput | DivinationWhereInput[]
    OR?: DivinationWhereInput[]
    NOT?: DivinationWhereInput | DivinationWhereInput[]
    question?: StringFilter<"Divination"> | string
    spreadId?: IntFilter<"Divination"> | number
    questionAnalysis?: StringFilter<"Divination"> | string
    spreadRecommendation?: StringFilter<"Divination"> | string
    createdAt?: DateTimeFilter<"Divination"> | Date | string
    updatedAt?: DateTimeFilter<"Divination"> | Date | string
    spread?: XOR<SpreadRelationFilter, SpreadWhereInput>
    divinationCards?: DivinationCardListRelationFilter
  }, "id">

  export type DivinationOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    spreadId?: SortOrder
    questionAnalysis?: SortOrder
    spreadRecommendation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DivinationCountOrderByAggregateInput
    _avg?: DivinationAvgOrderByAggregateInput
    _max?: DivinationMaxOrderByAggregateInput
    _min?: DivinationMinOrderByAggregateInput
    _sum?: DivinationSumOrderByAggregateInput
  }

  export type DivinationScalarWhereWithAggregatesInput = {
    AND?: DivinationScalarWhereWithAggregatesInput | DivinationScalarWhereWithAggregatesInput[]
    OR?: DivinationScalarWhereWithAggregatesInput[]
    NOT?: DivinationScalarWhereWithAggregatesInput | DivinationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Divination"> | string
    question?: StringWithAggregatesFilter<"Divination"> | string
    spreadId?: IntWithAggregatesFilter<"Divination"> | number
    questionAnalysis?: StringWithAggregatesFilter<"Divination"> | string
    spreadRecommendation?: StringWithAggregatesFilter<"Divination"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Divination"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Divination"> | Date | string
  }

  export type DivinationCardWhereInput = {
    AND?: DivinationCardWhereInput | DivinationCardWhereInput[]
    OR?: DivinationCardWhereInput[]
    NOT?: DivinationCardWhereInput | DivinationCardWhereInput[]
    id?: StringFilter<"DivinationCard"> | string
    divinationId?: StringFilter<"DivinationCard"> | string
    cardId?: IntFilter<"DivinationCard"> | number
    position?: StringFilter<"DivinationCard"> | string
    isReversed?: BoolFilter<"DivinationCard"> | boolean
    interpretation?: StringFilter<"DivinationCard"> | string
    createdAt?: DateTimeFilter<"DivinationCard"> | Date | string
    divination?: XOR<DivinationRelationFilter, DivinationWhereInput>
    card?: XOR<TarotCardRelationFilter, TarotCardWhereInput>
  }

  export type DivinationCardOrderByWithRelationInput = {
    id?: SortOrder
    divinationId?: SortOrder
    cardId?: SortOrder
    position?: SortOrder
    isReversed?: SortOrder
    interpretation?: SortOrder
    createdAt?: SortOrder
    divination?: DivinationOrderByWithRelationInput
    card?: TarotCardOrderByWithRelationInput
  }

  export type DivinationCardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    divinationId_position?: DivinationCardDivinationIdPositionCompoundUniqueInput
    AND?: DivinationCardWhereInput | DivinationCardWhereInput[]
    OR?: DivinationCardWhereInput[]
    NOT?: DivinationCardWhereInput | DivinationCardWhereInput[]
    divinationId?: StringFilter<"DivinationCard"> | string
    cardId?: IntFilter<"DivinationCard"> | number
    position?: StringFilter<"DivinationCard"> | string
    isReversed?: BoolFilter<"DivinationCard"> | boolean
    interpretation?: StringFilter<"DivinationCard"> | string
    createdAt?: DateTimeFilter<"DivinationCard"> | Date | string
    divination?: XOR<DivinationRelationFilter, DivinationWhereInput>
    card?: XOR<TarotCardRelationFilter, TarotCardWhereInput>
  }, "id" | "divinationId_position">

  export type DivinationCardOrderByWithAggregationInput = {
    id?: SortOrder
    divinationId?: SortOrder
    cardId?: SortOrder
    position?: SortOrder
    isReversed?: SortOrder
    interpretation?: SortOrder
    createdAt?: SortOrder
    _count?: DivinationCardCountOrderByAggregateInput
    _avg?: DivinationCardAvgOrderByAggregateInput
    _max?: DivinationCardMaxOrderByAggregateInput
    _min?: DivinationCardMinOrderByAggregateInput
    _sum?: DivinationCardSumOrderByAggregateInput
  }

  export type DivinationCardScalarWhereWithAggregatesInput = {
    AND?: DivinationCardScalarWhereWithAggregatesInput | DivinationCardScalarWhereWithAggregatesInput[]
    OR?: DivinationCardScalarWhereWithAggregatesInput[]
    NOT?: DivinationCardScalarWhereWithAggregatesInput | DivinationCardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DivinationCard"> | string
    divinationId?: StringWithAggregatesFilter<"DivinationCard"> | string
    cardId?: IntWithAggregatesFilter<"DivinationCard"> | number
    position?: StringWithAggregatesFilter<"DivinationCard"> | string
    isReversed?: BoolWithAggregatesFilter<"DivinationCard"> | boolean
    interpretation?: StringWithAggregatesFilter<"DivinationCard"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DivinationCard"> | Date | string
  }

  export type TarotCardCreateInput = {
    name: string
    arcana: string
    suit?: string | null
    number?: number | null
    uprightMeaning: string
    reversedMeaning: string
    keywords: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    divinationCards?: DivinationCardCreateNestedManyWithoutCardInput
  }

  export type TarotCardUncheckedCreateInput = {
    id?: number
    name: string
    arcana: string
    suit?: string | null
    number?: number | null
    uprightMeaning: string
    reversedMeaning: string
    keywords: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    divinationCards?: DivinationCardUncheckedCreateNestedManyWithoutCardInput
  }

  export type TarotCardUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    arcana?: StringFieldUpdateOperationsInput | string
    suit?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    uprightMeaning?: StringFieldUpdateOperationsInput | string
    reversedMeaning?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divinationCards?: DivinationCardUpdateManyWithoutCardNestedInput
  }

  export type TarotCardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    arcana?: StringFieldUpdateOperationsInput | string
    suit?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    uprightMeaning?: StringFieldUpdateOperationsInput | string
    reversedMeaning?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divinationCards?: DivinationCardUncheckedUpdateManyWithoutCardNestedInput
  }

  export type TarotCardCreateManyInput = {
    id?: number
    name: string
    arcana: string
    suit?: string | null
    number?: number | null
    uprightMeaning: string
    reversedMeaning: string
    keywords: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TarotCardUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    arcana?: StringFieldUpdateOperationsInput | string
    suit?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    uprightMeaning?: StringFieldUpdateOperationsInput | string
    reversedMeaning?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TarotCardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    arcana?: StringFieldUpdateOperationsInput | string
    suit?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    uprightMeaning?: StringFieldUpdateOperationsInput | string
    reversedMeaning?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpreadCreateInput = {
    name: string
    description: string
    positions: string
    cardCount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    divinations?: DivinationCreateNestedManyWithoutSpreadInput
  }

  export type SpreadUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    positions: string
    cardCount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    divinations?: DivinationUncheckedCreateNestedManyWithoutSpreadInput
  }

  export type SpreadUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    positions?: StringFieldUpdateOperationsInput | string
    cardCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divinations?: DivinationUpdateManyWithoutSpreadNestedInput
  }

  export type SpreadUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    positions?: StringFieldUpdateOperationsInput | string
    cardCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divinations?: DivinationUncheckedUpdateManyWithoutSpreadNestedInput
  }

  export type SpreadCreateManyInput = {
    id?: number
    name: string
    description: string
    positions: string
    cardCount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SpreadUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    positions?: StringFieldUpdateOperationsInput | string
    cardCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpreadUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    positions?: StringFieldUpdateOperationsInput | string
    cardCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DivinationCreateInput = {
    id?: string
    question: string
    questionAnalysis: string
    spreadRecommendation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    spread: SpreadCreateNestedOneWithoutDivinationsInput
    divinationCards?: DivinationCardCreateNestedManyWithoutDivinationInput
  }

  export type DivinationUncheckedCreateInput = {
    id?: string
    question: string
    spreadId: number
    questionAnalysis: string
    spreadRecommendation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    divinationCards?: DivinationCardUncheckedCreateNestedManyWithoutDivinationInput
  }

  export type DivinationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    questionAnalysis?: StringFieldUpdateOperationsInput | string
    spreadRecommendation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spread?: SpreadUpdateOneRequiredWithoutDivinationsNestedInput
    divinationCards?: DivinationCardUpdateManyWithoutDivinationNestedInput
  }

  export type DivinationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    spreadId?: IntFieldUpdateOperationsInput | number
    questionAnalysis?: StringFieldUpdateOperationsInput | string
    spreadRecommendation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divinationCards?: DivinationCardUncheckedUpdateManyWithoutDivinationNestedInput
  }

  export type DivinationCreateManyInput = {
    id?: string
    question: string
    spreadId: number
    questionAnalysis: string
    spreadRecommendation: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DivinationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    questionAnalysis?: StringFieldUpdateOperationsInput | string
    spreadRecommendation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DivinationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    spreadId?: IntFieldUpdateOperationsInput | number
    questionAnalysis?: StringFieldUpdateOperationsInput | string
    spreadRecommendation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DivinationCardCreateInput = {
    id?: string
    position: string
    isReversed?: boolean
    interpretation: string
    createdAt?: Date | string
    divination: DivinationCreateNestedOneWithoutDivinationCardsInput
    card: TarotCardCreateNestedOneWithoutDivinationCardsInput
  }

  export type DivinationCardUncheckedCreateInput = {
    id?: string
    divinationId: string
    cardId: number
    position: string
    isReversed?: boolean
    interpretation: string
    createdAt?: Date | string
  }

  export type DivinationCardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    isReversed?: BoolFieldUpdateOperationsInput | boolean
    interpretation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divination?: DivinationUpdateOneRequiredWithoutDivinationCardsNestedInput
    card?: TarotCardUpdateOneRequiredWithoutDivinationCardsNestedInput
  }

  export type DivinationCardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    divinationId?: StringFieldUpdateOperationsInput | string
    cardId?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    isReversed?: BoolFieldUpdateOperationsInput | boolean
    interpretation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DivinationCardCreateManyInput = {
    id?: string
    divinationId: string
    cardId: number
    position: string
    isReversed?: boolean
    interpretation: string
    createdAt?: Date | string
  }

  export type DivinationCardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    isReversed?: BoolFieldUpdateOperationsInput | boolean
    interpretation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DivinationCardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    divinationId?: StringFieldUpdateOperationsInput | string
    cardId?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    isReversed?: BoolFieldUpdateOperationsInput | boolean
    interpretation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DivinationCardListRelationFilter = {
    every?: DivinationCardWhereInput
    some?: DivinationCardWhereInput
    none?: DivinationCardWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DivinationCardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TarotCardCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    arcana?: SortOrder
    suit?: SortOrder
    number?: SortOrder
    uprightMeaning?: SortOrder
    reversedMeaning?: SortOrder
    keywords?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TarotCardAvgOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
  }

  export type TarotCardMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    arcana?: SortOrder
    suit?: SortOrder
    number?: SortOrder
    uprightMeaning?: SortOrder
    reversedMeaning?: SortOrder
    keywords?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TarotCardMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    arcana?: SortOrder
    suit?: SortOrder
    number?: SortOrder
    uprightMeaning?: SortOrder
    reversedMeaning?: SortOrder
    keywords?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TarotCardSumOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DivinationListRelationFilter = {
    every?: DivinationWhereInput
    some?: DivinationWhereInput
    none?: DivinationWhereInput
  }

  export type DivinationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpreadCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    positions?: SortOrder
    cardCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SpreadAvgOrderByAggregateInput = {
    id?: SortOrder
    cardCount?: SortOrder
  }

  export type SpreadMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    positions?: SortOrder
    cardCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SpreadMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    positions?: SortOrder
    cardCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SpreadSumOrderByAggregateInput = {
    id?: SortOrder
    cardCount?: SortOrder
  }

  export type SpreadRelationFilter = {
    is?: SpreadWhereInput
    isNot?: SpreadWhereInput
  }

  export type DivinationCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    spreadId?: SortOrder
    questionAnalysis?: SortOrder
    spreadRecommendation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DivinationAvgOrderByAggregateInput = {
    spreadId?: SortOrder
  }

  export type DivinationMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    spreadId?: SortOrder
    questionAnalysis?: SortOrder
    spreadRecommendation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DivinationMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    spreadId?: SortOrder
    questionAnalysis?: SortOrder
    spreadRecommendation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DivinationSumOrderByAggregateInput = {
    spreadId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DivinationRelationFilter = {
    is?: DivinationWhereInput
    isNot?: DivinationWhereInput
  }

  export type TarotCardRelationFilter = {
    is?: TarotCardWhereInput
    isNot?: TarotCardWhereInput
  }

  export type DivinationCardDivinationIdPositionCompoundUniqueInput = {
    divinationId: string
    position: string
  }

  export type DivinationCardCountOrderByAggregateInput = {
    id?: SortOrder
    divinationId?: SortOrder
    cardId?: SortOrder
    position?: SortOrder
    isReversed?: SortOrder
    interpretation?: SortOrder
    createdAt?: SortOrder
  }

  export type DivinationCardAvgOrderByAggregateInput = {
    cardId?: SortOrder
  }

  export type DivinationCardMaxOrderByAggregateInput = {
    id?: SortOrder
    divinationId?: SortOrder
    cardId?: SortOrder
    position?: SortOrder
    isReversed?: SortOrder
    interpretation?: SortOrder
    createdAt?: SortOrder
  }

  export type DivinationCardMinOrderByAggregateInput = {
    id?: SortOrder
    divinationId?: SortOrder
    cardId?: SortOrder
    position?: SortOrder
    isReversed?: SortOrder
    interpretation?: SortOrder
    createdAt?: SortOrder
  }

  export type DivinationCardSumOrderByAggregateInput = {
    cardId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DivinationCardCreateNestedManyWithoutCardInput = {
    create?: XOR<DivinationCardCreateWithoutCardInput, DivinationCardUncheckedCreateWithoutCardInput> | DivinationCardCreateWithoutCardInput[] | DivinationCardUncheckedCreateWithoutCardInput[]
    connectOrCreate?: DivinationCardCreateOrConnectWithoutCardInput | DivinationCardCreateOrConnectWithoutCardInput[]
    createMany?: DivinationCardCreateManyCardInputEnvelope
    connect?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
  }

  export type DivinationCardUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<DivinationCardCreateWithoutCardInput, DivinationCardUncheckedCreateWithoutCardInput> | DivinationCardCreateWithoutCardInput[] | DivinationCardUncheckedCreateWithoutCardInput[]
    connectOrCreate?: DivinationCardCreateOrConnectWithoutCardInput | DivinationCardCreateOrConnectWithoutCardInput[]
    createMany?: DivinationCardCreateManyCardInputEnvelope
    connect?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DivinationCardUpdateManyWithoutCardNestedInput = {
    create?: XOR<DivinationCardCreateWithoutCardInput, DivinationCardUncheckedCreateWithoutCardInput> | DivinationCardCreateWithoutCardInput[] | DivinationCardUncheckedCreateWithoutCardInput[]
    connectOrCreate?: DivinationCardCreateOrConnectWithoutCardInput | DivinationCardCreateOrConnectWithoutCardInput[]
    upsert?: DivinationCardUpsertWithWhereUniqueWithoutCardInput | DivinationCardUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: DivinationCardCreateManyCardInputEnvelope
    set?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
    disconnect?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
    delete?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
    connect?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
    update?: DivinationCardUpdateWithWhereUniqueWithoutCardInput | DivinationCardUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: DivinationCardUpdateManyWithWhereWithoutCardInput | DivinationCardUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: DivinationCardScalarWhereInput | DivinationCardScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DivinationCardUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<DivinationCardCreateWithoutCardInput, DivinationCardUncheckedCreateWithoutCardInput> | DivinationCardCreateWithoutCardInput[] | DivinationCardUncheckedCreateWithoutCardInput[]
    connectOrCreate?: DivinationCardCreateOrConnectWithoutCardInput | DivinationCardCreateOrConnectWithoutCardInput[]
    upsert?: DivinationCardUpsertWithWhereUniqueWithoutCardInput | DivinationCardUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: DivinationCardCreateManyCardInputEnvelope
    set?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
    disconnect?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
    delete?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
    connect?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
    update?: DivinationCardUpdateWithWhereUniqueWithoutCardInput | DivinationCardUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: DivinationCardUpdateManyWithWhereWithoutCardInput | DivinationCardUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: DivinationCardScalarWhereInput | DivinationCardScalarWhereInput[]
  }

  export type DivinationCreateNestedManyWithoutSpreadInput = {
    create?: XOR<DivinationCreateWithoutSpreadInput, DivinationUncheckedCreateWithoutSpreadInput> | DivinationCreateWithoutSpreadInput[] | DivinationUncheckedCreateWithoutSpreadInput[]
    connectOrCreate?: DivinationCreateOrConnectWithoutSpreadInput | DivinationCreateOrConnectWithoutSpreadInput[]
    createMany?: DivinationCreateManySpreadInputEnvelope
    connect?: DivinationWhereUniqueInput | DivinationWhereUniqueInput[]
  }

  export type DivinationUncheckedCreateNestedManyWithoutSpreadInput = {
    create?: XOR<DivinationCreateWithoutSpreadInput, DivinationUncheckedCreateWithoutSpreadInput> | DivinationCreateWithoutSpreadInput[] | DivinationUncheckedCreateWithoutSpreadInput[]
    connectOrCreate?: DivinationCreateOrConnectWithoutSpreadInput | DivinationCreateOrConnectWithoutSpreadInput[]
    createMany?: DivinationCreateManySpreadInputEnvelope
    connect?: DivinationWhereUniqueInput | DivinationWhereUniqueInput[]
  }

  export type DivinationUpdateManyWithoutSpreadNestedInput = {
    create?: XOR<DivinationCreateWithoutSpreadInput, DivinationUncheckedCreateWithoutSpreadInput> | DivinationCreateWithoutSpreadInput[] | DivinationUncheckedCreateWithoutSpreadInput[]
    connectOrCreate?: DivinationCreateOrConnectWithoutSpreadInput | DivinationCreateOrConnectWithoutSpreadInput[]
    upsert?: DivinationUpsertWithWhereUniqueWithoutSpreadInput | DivinationUpsertWithWhereUniqueWithoutSpreadInput[]
    createMany?: DivinationCreateManySpreadInputEnvelope
    set?: DivinationWhereUniqueInput | DivinationWhereUniqueInput[]
    disconnect?: DivinationWhereUniqueInput | DivinationWhereUniqueInput[]
    delete?: DivinationWhereUniqueInput | DivinationWhereUniqueInput[]
    connect?: DivinationWhereUniqueInput | DivinationWhereUniqueInput[]
    update?: DivinationUpdateWithWhereUniqueWithoutSpreadInput | DivinationUpdateWithWhereUniqueWithoutSpreadInput[]
    updateMany?: DivinationUpdateManyWithWhereWithoutSpreadInput | DivinationUpdateManyWithWhereWithoutSpreadInput[]
    deleteMany?: DivinationScalarWhereInput | DivinationScalarWhereInput[]
  }

  export type DivinationUncheckedUpdateManyWithoutSpreadNestedInput = {
    create?: XOR<DivinationCreateWithoutSpreadInput, DivinationUncheckedCreateWithoutSpreadInput> | DivinationCreateWithoutSpreadInput[] | DivinationUncheckedCreateWithoutSpreadInput[]
    connectOrCreate?: DivinationCreateOrConnectWithoutSpreadInput | DivinationCreateOrConnectWithoutSpreadInput[]
    upsert?: DivinationUpsertWithWhereUniqueWithoutSpreadInput | DivinationUpsertWithWhereUniqueWithoutSpreadInput[]
    createMany?: DivinationCreateManySpreadInputEnvelope
    set?: DivinationWhereUniqueInput | DivinationWhereUniqueInput[]
    disconnect?: DivinationWhereUniqueInput | DivinationWhereUniqueInput[]
    delete?: DivinationWhereUniqueInput | DivinationWhereUniqueInput[]
    connect?: DivinationWhereUniqueInput | DivinationWhereUniqueInput[]
    update?: DivinationUpdateWithWhereUniqueWithoutSpreadInput | DivinationUpdateWithWhereUniqueWithoutSpreadInput[]
    updateMany?: DivinationUpdateManyWithWhereWithoutSpreadInput | DivinationUpdateManyWithWhereWithoutSpreadInput[]
    deleteMany?: DivinationScalarWhereInput | DivinationScalarWhereInput[]
  }

  export type SpreadCreateNestedOneWithoutDivinationsInput = {
    create?: XOR<SpreadCreateWithoutDivinationsInput, SpreadUncheckedCreateWithoutDivinationsInput>
    connectOrCreate?: SpreadCreateOrConnectWithoutDivinationsInput
    connect?: SpreadWhereUniqueInput
  }

  export type DivinationCardCreateNestedManyWithoutDivinationInput = {
    create?: XOR<DivinationCardCreateWithoutDivinationInput, DivinationCardUncheckedCreateWithoutDivinationInput> | DivinationCardCreateWithoutDivinationInput[] | DivinationCardUncheckedCreateWithoutDivinationInput[]
    connectOrCreate?: DivinationCardCreateOrConnectWithoutDivinationInput | DivinationCardCreateOrConnectWithoutDivinationInput[]
    createMany?: DivinationCardCreateManyDivinationInputEnvelope
    connect?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
  }

  export type DivinationCardUncheckedCreateNestedManyWithoutDivinationInput = {
    create?: XOR<DivinationCardCreateWithoutDivinationInput, DivinationCardUncheckedCreateWithoutDivinationInput> | DivinationCardCreateWithoutDivinationInput[] | DivinationCardUncheckedCreateWithoutDivinationInput[]
    connectOrCreate?: DivinationCardCreateOrConnectWithoutDivinationInput | DivinationCardCreateOrConnectWithoutDivinationInput[]
    createMany?: DivinationCardCreateManyDivinationInputEnvelope
    connect?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
  }

  export type SpreadUpdateOneRequiredWithoutDivinationsNestedInput = {
    create?: XOR<SpreadCreateWithoutDivinationsInput, SpreadUncheckedCreateWithoutDivinationsInput>
    connectOrCreate?: SpreadCreateOrConnectWithoutDivinationsInput
    upsert?: SpreadUpsertWithoutDivinationsInput
    connect?: SpreadWhereUniqueInput
    update?: XOR<XOR<SpreadUpdateToOneWithWhereWithoutDivinationsInput, SpreadUpdateWithoutDivinationsInput>, SpreadUncheckedUpdateWithoutDivinationsInput>
  }

  export type DivinationCardUpdateManyWithoutDivinationNestedInput = {
    create?: XOR<DivinationCardCreateWithoutDivinationInput, DivinationCardUncheckedCreateWithoutDivinationInput> | DivinationCardCreateWithoutDivinationInput[] | DivinationCardUncheckedCreateWithoutDivinationInput[]
    connectOrCreate?: DivinationCardCreateOrConnectWithoutDivinationInput | DivinationCardCreateOrConnectWithoutDivinationInput[]
    upsert?: DivinationCardUpsertWithWhereUniqueWithoutDivinationInput | DivinationCardUpsertWithWhereUniqueWithoutDivinationInput[]
    createMany?: DivinationCardCreateManyDivinationInputEnvelope
    set?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
    disconnect?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
    delete?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
    connect?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
    update?: DivinationCardUpdateWithWhereUniqueWithoutDivinationInput | DivinationCardUpdateWithWhereUniqueWithoutDivinationInput[]
    updateMany?: DivinationCardUpdateManyWithWhereWithoutDivinationInput | DivinationCardUpdateManyWithWhereWithoutDivinationInput[]
    deleteMany?: DivinationCardScalarWhereInput | DivinationCardScalarWhereInput[]
  }

  export type DivinationCardUncheckedUpdateManyWithoutDivinationNestedInput = {
    create?: XOR<DivinationCardCreateWithoutDivinationInput, DivinationCardUncheckedCreateWithoutDivinationInput> | DivinationCardCreateWithoutDivinationInput[] | DivinationCardUncheckedCreateWithoutDivinationInput[]
    connectOrCreate?: DivinationCardCreateOrConnectWithoutDivinationInput | DivinationCardCreateOrConnectWithoutDivinationInput[]
    upsert?: DivinationCardUpsertWithWhereUniqueWithoutDivinationInput | DivinationCardUpsertWithWhereUniqueWithoutDivinationInput[]
    createMany?: DivinationCardCreateManyDivinationInputEnvelope
    set?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
    disconnect?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
    delete?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
    connect?: DivinationCardWhereUniqueInput | DivinationCardWhereUniqueInput[]
    update?: DivinationCardUpdateWithWhereUniqueWithoutDivinationInput | DivinationCardUpdateWithWhereUniqueWithoutDivinationInput[]
    updateMany?: DivinationCardUpdateManyWithWhereWithoutDivinationInput | DivinationCardUpdateManyWithWhereWithoutDivinationInput[]
    deleteMany?: DivinationCardScalarWhereInput | DivinationCardScalarWhereInput[]
  }

  export type DivinationCreateNestedOneWithoutDivinationCardsInput = {
    create?: XOR<DivinationCreateWithoutDivinationCardsInput, DivinationUncheckedCreateWithoutDivinationCardsInput>
    connectOrCreate?: DivinationCreateOrConnectWithoutDivinationCardsInput
    connect?: DivinationWhereUniqueInput
  }

  export type TarotCardCreateNestedOneWithoutDivinationCardsInput = {
    create?: XOR<TarotCardCreateWithoutDivinationCardsInput, TarotCardUncheckedCreateWithoutDivinationCardsInput>
    connectOrCreate?: TarotCardCreateOrConnectWithoutDivinationCardsInput
    connect?: TarotCardWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DivinationUpdateOneRequiredWithoutDivinationCardsNestedInput = {
    create?: XOR<DivinationCreateWithoutDivinationCardsInput, DivinationUncheckedCreateWithoutDivinationCardsInput>
    connectOrCreate?: DivinationCreateOrConnectWithoutDivinationCardsInput
    upsert?: DivinationUpsertWithoutDivinationCardsInput
    connect?: DivinationWhereUniqueInput
    update?: XOR<XOR<DivinationUpdateToOneWithWhereWithoutDivinationCardsInput, DivinationUpdateWithoutDivinationCardsInput>, DivinationUncheckedUpdateWithoutDivinationCardsInput>
  }

  export type TarotCardUpdateOneRequiredWithoutDivinationCardsNestedInput = {
    create?: XOR<TarotCardCreateWithoutDivinationCardsInput, TarotCardUncheckedCreateWithoutDivinationCardsInput>
    connectOrCreate?: TarotCardCreateOrConnectWithoutDivinationCardsInput
    upsert?: TarotCardUpsertWithoutDivinationCardsInput
    connect?: TarotCardWhereUniqueInput
    update?: XOR<XOR<TarotCardUpdateToOneWithWhereWithoutDivinationCardsInput, TarotCardUpdateWithoutDivinationCardsInput>, TarotCardUncheckedUpdateWithoutDivinationCardsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DivinationCardCreateWithoutCardInput = {
    id?: string
    position: string
    isReversed?: boolean
    interpretation: string
    createdAt?: Date | string
    divination: DivinationCreateNestedOneWithoutDivinationCardsInput
  }

  export type DivinationCardUncheckedCreateWithoutCardInput = {
    id?: string
    divinationId: string
    position: string
    isReversed?: boolean
    interpretation: string
    createdAt?: Date | string
  }

  export type DivinationCardCreateOrConnectWithoutCardInput = {
    where: DivinationCardWhereUniqueInput
    create: XOR<DivinationCardCreateWithoutCardInput, DivinationCardUncheckedCreateWithoutCardInput>
  }

  export type DivinationCardCreateManyCardInputEnvelope = {
    data: DivinationCardCreateManyCardInput | DivinationCardCreateManyCardInput[]
  }

  export type DivinationCardUpsertWithWhereUniqueWithoutCardInput = {
    where: DivinationCardWhereUniqueInput
    update: XOR<DivinationCardUpdateWithoutCardInput, DivinationCardUncheckedUpdateWithoutCardInput>
    create: XOR<DivinationCardCreateWithoutCardInput, DivinationCardUncheckedCreateWithoutCardInput>
  }

  export type DivinationCardUpdateWithWhereUniqueWithoutCardInput = {
    where: DivinationCardWhereUniqueInput
    data: XOR<DivinationCardUpdateWithoutCardInput, DivinationCardUncheckedUpdateWithoutCardInput>
  }

  export type DivinationCardUpdateManyWithWhereWithoutCardInput = {
    where: DivinationCardScalarWhereInput
    data: XOR<DivinationCardUpdateManyMutationInput, DivinationCardUncheckedUpdateManyWithoutCardInput>
  }

  export type DivinationCardScalarWhereInput = {
    AND?: DivinationCardScalarWhereInput | DivinationCardScalarWhereInput[]
    OR?: DivinationCardScalarWhereInput[]
    NOT?: DivinationCardScalarWhereInput | DivinationCardScalarWhereInput[]
    id?: StringFilter<"DivinationCard"> | string
    divinationId?: StringFilter<"DivinationCard"> | string
    cardId?: IntFilter<"DivinationCard"> | number
    position?: StringFilter<"DivinationCard"> | string
    isReversed?: BoolFilter<"DivinationCard"> | boolean
    interpretation?: StringFilter<"DivinationCard"> | string
    createdAt?: DateTimeFilter<"DivinationCard"> | Date | string
  }

  export type DivinationCreateWithoutSpreadInput = {
    id?: string
    question: string
    questionAnalysis: string
    spreadRecommendation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    divinationCards?: DivinationCardCreateNestedManyWithoutDivinationInput
  }

  export type DivinationUncheckedCreateWithoutSpreadInput = {
    id?: string
    question: string
    questionAnalysis: string
    spreadRecommendation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    divinationCards?: DivinationCardUncheckedCreateNestedManyWithoutDivinationInput
  }

  export type DivinationCreateOrConnectWithoutSpreadInput = {
    where: DivinationWhereUniqueInput
    create: XOR<DivinationCreateWithoutSpreadInput, DivinationUncheckedCreateWithoutSpreadInput>
  }

  export type DivinationCreateManySpreadInputEnvelope = {
    data: DivinationCreateManySpreadInput | DivinationCreateManySpreadInput[]
  }

  export type DivinationUpsertWithWhereUniqueWithoutSpreadInput = {
    where: DivinationWhereUniqueInput
    update: XOR<DivinationUpdateWithoutSpreadInput, DivinationUncheckedUpdateWithoutSpreadInput>
    create: XOR<DivinationCreateWithoutSpreadInput, DivinationUncheckedCreateWithoutSpreadInput>
  }

  export type DivinationUpdateWithWhereUniqueWithoutSpreadInput = {
    where: DivinationWhereUniqueInput
    data: XOR<DivinationUpdateWithoutSpreadInput, DivinationUncheckedUpdateWithoutSpreadInput>
  }

  export type DivinationUpdateManyWithWhereWithoutSpreadInput = {
    where: DivinationScalarWhereInput
    data: XOR<DivinationUpdateManyMutationInput, DivinationUncheckedUpdateManyWithoutSpreadInput>
  }

  export type DivinationScalarWhereInput = {
    AND?: DivinationScalarWhereInput | DivinationScalarWhereInput[]
    OR?: DivinationScalarWhereInput[]
    NOT?: DivinationScalarWhereInput | DivinationScalarWhereInput[]
    id?: StringFilter<"Divination"> | string
    question?: StringFilter<"Divination"> | string
    spreadId?: IntFilter<"Divination"> | number
    questionAnalysis?: StringFilter<"Divination"> | string
    spreadRecommendation?: StringFilter<"Divination"> | string
    createdAt?: DateTimeFilter<"Divination"> | Date | string
    updatedAt?: DateTimeFilter<"Divination"> | Date | string
  }

  export type SpreadCreateWithoutDivinationsInput = {
    name: string
    description: string
    positions: string
    cardCount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SpreadUncheckedCreateWithoutDivinationsInput = {
    id?: number
    name: string
    description: string
    positions: string
    cardCount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SpreadCreateOrConnectWithoutDivinationsInput = {
    where: SpreadWhereUniqueInput
    create: XOR<SpreadCreateWithoutDivinationsInput, SpreadUncheckedCreateWithoutDivinationsInput>
  }

  export type DivinationCardCreateWithoutDivinationInput = {
    id?: string
    position: string
    isReversed?: boolean
    interpretation: string
    createdAt?: Date | string
    card: TarotCardCreateNestedOneWithoutDivinationCardsInput
  }

  export type DivinationCardUncheckedCreateWithoutDivinationInput = {
    id?: string
    cardId: number
    position: string
    isReversed?: boolean
    interpretation: string
    createdAt?: Date | string
  }

  export type DivinationCardCreateOrConnectWithoutDivinationInput = {
    where: DivinationCardWhereUniqueInput
    create: XOR<DivinationCardCreateWithoutDivinationInput, DivinationCardUncheckedCreateWithoutDivinationInput>
  }

  export type DivinationCardCreateManyDivinationInputEnvelope = {
    data: DivinationCardCreateManyDivinationInput | DivinationCardCreateManyDivinationInput[]
  }

  export type SpreadUpsertWithoutDivinationsInput = {
    update: XOR<SpreadUpdateWithoutDivinationsInput, SpreadUncheckedUpdateWithoutDivinationsInput>
    create: XOR<SpreadCreateWithoutDivinationsInput, SpreadUncheckedCreateWithoutDivinationsInput>
    where?: SpreadWhereInput
  }

  export type SpreadUpdateToOneWithWhereWithoutDivinationsInput = {
    where?: SpreadWhereInput
    data: XOR<SpreadUpdateWithoutDivinationsInput, SpreadUncheckedUpdateWithoutDivinationsInput>
  }

  export type SpreadUpdateWithoutDivinationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    positions?: StringFieldUpdateOperationsInput | string
    cardCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpreadUncheckedUpdateWithoutDivinationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    positions?: StringFieldUpdateOperationsInput | string
    cardCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DivinationCardUpsertWithWhereUniqueWithoutDivinationInput = {
    where: DivinationCardWhereUniqueInput
    update: XOR<DivinationCardUpdateWithoutDivinationInput, DivinationCardUncheckedUpdateWithoutDivinationInput>
    create: XOR<DivinationCardCreateWithoutDivinationInput, DivinationCardUncheckedCreateWithoutDivinationInput>
  }

  export type DivinationCardUpdateWithWhereUniqueWithoutDivinationInput = {
    where: DivinationCardWhereUniqueInput
    data: XOR<DivinationCardUpdateWithoutDivinationInput, DivinationCardUncheckedUpdateWithoutDivinationInput>
  }

  export type DivinationCardUpdateManyWithWhereWithoutDivinationInput = {
    where: DivinationCardScalarWhereInput
    data: XOR<DivinationCardUpdateManyMutationInput, DivinationCardUncheckedUpdateManyWithoutDivinationInput>
  }

  export type DivinationCreateWithoutDivinationCardsInput = {
    id?: string
    question: string
    questionAnalysis: string
    spreadRecommendation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    spread: SpreadCreateNestedOneWithoutDivinationsInput
  }

  export type DivinationUncheckedCreateWithoutDivinationCardsInput = {
    id?: string
    question: string
    spreadId: number
    questionAnalysis: string
    spreadRecommendation: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DivinationCreateOrConnectWithoutDivinationCardsInput = {
    where: DivinationWhereUniqueInput
    create: XOR<DivinationCreateWithoutDivinationCardsInput, DivinationUncheckedCreateWithoutDivinationCardsInput>
  }

  export type TarotCardCreateWithoutDivinationCardsInput = {
    name: string
    arcana: string
    suit?: string | null
    number?: number | null
    uprightMeaning: string
    reversedMeaning: string
    keywords: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TarotCardUncheckedCreateWithoutDivinationCardsInput = {
    id?: number
    name: string
    arcana: string
    suit?: string | null
    number?: number | null
    uprightMeaning: string
    reversedMeaning: string
    keywords: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TarotCardCreateOrConnectWithoutDivinationCardsInput = {
    where: TarotCardWhereUniqueInput
    create: XOR<TarotCardCreateWithoutDivinationCardsInput, TarotCardUncheckedCreateWithoutDivinationCardsInput>
  }

  export type DivinationUpsertWithoutDivinationCardsInput = {
    update: XOR<DivinationUpdateWithoutDivinationCardsInput, DivinationUncheckedUpdateWithoutDivinationCardsInput>
    create: XOR<DivinationCreateWithoutDivinationCardsInput, DivinationUncheckedCreateWithoutDivinationCardsInput>
    where?: DivinationWhereInput
  }

  export type DivinationUpdateToOneWithWhereWithoutDivinationCardsInput = {
    where?: DivinationWhereInput
    data: XOR<DivinationUpdateWithoutDivinationCardsInput, DivinationUncheckedUpdateWithoutDivinationCardsInput>
  }

  export type DivinationUpdateWithoutDivinationCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    questionAnalysis?: StringFieldUpdateOperationsInput | string
    spreadRecommendation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    spread?: SpreadUpdateOneRequiredWithoutDivinationsNestedInput
  }

  export type DivinationUncheckedUpdateWithoutDivinationCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    spreadId?: IntFieldUpdateOperationsInput | number
    questionAnalysis?: StringFieldUpdateOperationsInput | string
    spreadRecommendation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TarotCardUpsertWithoutDivinationCardsInput = {
    update: XOR<TarotCardUpdateWithoutDivinationCardsInput, TarotCardUncheckedUpdateWithoutDivinationCardsInput>
    create: XOR<TarotCardCreateWithoutDivinationCardsInput, TarotCardUncheckedCreateWithoutDivinationCardsInput>
    where?: TarotCardWhereInput
  }

  export type TarotCardUpdateToOneWithWhereWithoutDivinationCardsInput = {
    where?: TarotCardWhereInput
    data: XOR<TarotCardUpdateWithoutDivinationCardsInput, TarotCardUncheckedUpdateWithoutDivinationCardsInput>
  }

  export type TarotCardUpdateWithoutDivinationCardsInput = {
    name?: StringFieldUpdateOperationsInput | string
    arcana?: StringFieldUpdateOperationsInput | string
    suit?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    uprightMeaning?: StringFieldUpdateOperationsInput | string
    reversedMeaning?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TarotCardUncheckedUpdateWithoutDivinationCardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    arcana?: StringFieldUpdateOperationsInput | string
    suit?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    uprightMeaning?: StringFieldUpdateOperationsInput | string
    reversedMeaning?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DivinationCardCreateManyCardInput = {
    id?: string
    divinationId: string
    position: string
    isReversed?: boolean
    interpretation: string
    createdAt?: Date | string
  }

  export type DivinationCardUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    isReversed?: BoolFieldUpdateOperationsInput | boolean
    interpretation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divination?: DivinationUpdateOneRequiredWithoutDivinationCardsNestedInput
  }

  export type DivinationCardUncheckedUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    divinationId?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    isReversed?: BoolFieldUpdateOperationsInput | boolean
    interpretation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DivinationCardUncheckedUpdateManyWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    divinationId?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    isReversed?: BoolFieldUpdateOperationsInput | boolean
    interpretation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DivinationCreateManySpreadInput = {
    id?: string
    question: string
    questionAnalysis: string
    spreadRecommendation: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DivinationUpdateWithoutSpreadInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    questionAnalysis?: StringFieldUpdateOperationsInput | string
    spreadRecommendation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divinationCards?: DivinationCardUpdateManyWithoutDivinationNestedInput
  }

  export type DivinationUncheckedUpdateWithoutSpreadInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    questionAnalysis?: StringFieldUpdateOperationsInput | string
    spreadRecommendation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    divinationCards?: DivinationCardUncheckedUpdateManyWithoutDivinationNestedInput
  }

  export type DivinationUncheckedUpdateManyWithoutSpreadInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    questionAnalysis?: StringFieldUpdateOperationsInput | string
    spreadRecommendation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DivinationCardCreateManyDivinationInput = {
    id?: string
    cardId: number
    position: string
    isReversed?: boolean
    interpretation: string
    createdAt?: Date | string
  }

  export type DivinationCardUpdateWithoutDivinationInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    isReversed?: BoolFieldUpdateOperationsInput | boolean
    interpretation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    card?: TarotCardUpdateOneRequiredWithoutDivinationCardsNestedInput
  }

  export type DivinationCardUncheckedUpdateWithoutDivinationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    isReversed?: BoolFieldUpdateOperationsInput | boolean
    interpretation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DivinationCardUncheckedUpdateManyWithoutDivinationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    isReversed?: BoolFieldUpdateOperationsInput | boolean
    interpretation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use TarotCardCountOutputTypeDefaultArgs instead
     */
    export type TarotCardCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TarotCardCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SpreadCountOutputTypeDefaultArgs instead
     */
    export type SpreadCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SpreadCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DivinationCountOutputTypeDefaultArgs instead
     */
    export type DivinationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DivinationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TarotCardDefaultArgs instead
     */
    export type TarotCardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TarotCardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SpreadDefaultArgs instead
     */
    export type SpreadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SpreadDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DivinationDefaultArgs instead
     */
    export type DivinationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DivinationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DivinationCardDefaultArgs instead
     */
    export type DivinationCardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DivinationCardDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}